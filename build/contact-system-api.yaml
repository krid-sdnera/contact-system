openapi: 3.0.0
servers:
  - url: "https://{subdomain}.mooneevalleyscouts.org.au/{version}"
    variables:
      subdomain:
        description: "Subdomain, related to environment"
        default: members
        enum:
          - stg-members
          - members
      version:
        description: API Version
        default: v1
        enum:
          - v1
    description: Moonee Valley Contact System
  - url: "http://localhost:8000/api/{version}"
    variables:
      version:
        description: API Version
        default: v1
        enum:
          - v1
    description: MVD CS Dev
info:
  description: This is the spec for the Constact system API
  version: 1.0.0
  title: Contact System API
  termsOfService: ""
  contact:
    email: dirk@arends.com.au
    name: Dirk Arends
tags:
  - name: ScoutGroups
    description: Everything you need to handle `groups`
  - name: Lists
    description: Everything you need to handle `lists`
  - name: Members
    description: Everything you need to handle `members`
  - name: Contacts
    description: Everything you need to handle `contacts`
  - name: Roles
    description: Everything you need to handle `roles`
  - name: Sections
    description: Everything you need to handle `sections`
paths:
  /members:
    post:
      tags:
        - members
      summary: Create a member
      description: Create a member
      operationId: createMember
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
    get:
      summary: List all members
      description: List all members
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      operationId: getMembers
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                title: Members
                description: A list of members
                type: object
                properties:
                  members:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberData"
                required:
                  - members
      tags:
        - members
  "/members/{memberId}":
    get:
      summary: Get member
      description: Get details for a member
      parameters: []
      operationId: getMemberById
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
      tags:
        - members
    put:
      summary: Update member
      description: Update member
      parameters: []
      operationId: updateMemberById
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
      tags:
        - members
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
    patch:
      summary: Partially update member
      description: Partially update member
      parameters: []
      operationId: patchMemberById
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
      tags:
        - members
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
    delete:
      summary: Delete member
      description: Delete a member
      parameters: []
      operationId: deleteMemberById
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - members
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
  "/members/{memberId}/contacts":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getMemberContactsById
      summary: List member's contacts
      description: List contacts for this member
      tags:
        - members
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Contacts
                description: A list of contacts
                type: object
                properties:
                  contacts:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ContactData"
                required:
                  - contacts
  "/members/{memberId}/roles":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getMemberRolesById
      summary: List member's roles
      description: List roles for this member
      tags:
        - members
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: MemberRoles
                description: A list of roles
                type: object
                properties:
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberRoleData"
                required:
                  - roles
  "/members/{memberId}/merge_into/{mergeMemberId}":
    post:
      summary: Merge member
      description: Merge member
      parameters: []
      operationId: mergeMember
      tags:
        - members
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
      - schema:
          type: integer
        name: mergeMemberId
        in: path
        required: true
  "/members/{memberId}/roles/{roleId}":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    put:
      summary: Add Member Role
      description: addMemberRoleById
      operationId: addMemberRoleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberRoleData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberRoleInput"
      tags:
        - members
    delete:
      summary: Remove Member Role
      description: removeMemberRoleById
      operationId: removeMemberRoleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - members
  /roles:
    get:
      summary: Get roles
      description: Get roles
      operationId: getRoles
      tags:
        - roles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Roles
                description: A list of roles
                type: object
                properties:
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/RoleData"
                required:
                  - roles
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
    post:
      summary: Create role
      description: Create role
      operationId: createRole
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      tags:
        - roles
  "/roles/{roleId}":
    parameters:
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    get:
      summary: Get Role
      description: Get role
      tags:
        - roles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
      operationId: getRoleById
    put:
      summary: Update role
      description: Update role
      operationId: updateRoleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      tags:
        - roles
    delete:
      summary: Delete role
      description: Delete role
      operationId: deleteRoleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - roles
  /contacts:
    get:
      summary: Your GET endpoint
      description: Your GET endpoint
      tags:
        - contacts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Contacts
                description: A list of contacts
                type: object
                properties:
                  contacts:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ContactData"
                required:
                  - contacts
      operationId: getContacts
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
    post:
      summary: ""
      description: createContact
      operationId: createContact
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      tags:
        - contacts
  "/contacts/{contactId}":
    parameters:
      - schema:
          type: integer
        name: contactId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getContactById
      tags:
        - contacts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
      operationId: getContactById
    put:
      summary: ""
      description: updateContactById
      operationId: updateContactById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      tags:
        - contacts
    patch:
      summary: ""
      description: patchContactById
      operationId: patchContactById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      tags:
        - contacts
    delete:
      summary: ""
      description: deleteContactById
      operationId: deleteContactById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - contacts
  /groups:
    get:
      summary: Get Groups
      description: Get Groups
      tags:
        - ScoutGroups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Scout Groups
                description: A list of scout groups
                type: object
                properties:
                  scoutGroups:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ScoutGroupData"
                required:
                  - scoutGroups
      operationId: getScoutGroups
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
    post:
      summary: Create Group
      description: Create Group
      operationId: createScoutGroup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoutGroupInput"
      tags:
        - ScoutGroups
  "/groups/{scoutGroupId}":
    parameters:
      - schema:
          type: integer
        name: scoutGroupId
        in: path
        required: true
    get:
      summary: Get Group
      description: Get Group
      tags:
        - ScoutGroups
      responses:
        "200":
          description: "OK  "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
      operationId: getScoutGroupById
    put:
      summary: Update Group
      description: Update Group
      operationId: updateScoutGroupById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoutGroupInput"
      tags:
        - ScoutGroups
    delete:
      summary: Delete Group
      description: Delete Group
      operationId: deleteScoutGroupById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - ScoutGroups
  "/groups/{scoutGroupId}/sections":
    parameters:
      - schema:
          type: integer
        name: scoutGroupId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getScoutGroupSectionsById
      operationId: getScoutGroupSectionsById
      tags:
        - ScoutGroups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Sections
                description: A list of sections
                type: object
                properties:
                  sections:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/SectionData"
                required:
                  - sections
  /sections:
    get:
      summary: Get Sections
      description: Get Sections
      operationId: getSections
      tags:
        - sections
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Sections
                description: A list of sections
                type: object
                properties:
                  sections:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/SectionData"
                required:
                  - sections
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
    post:
      summary: Create Section
      description: Create Section
      operationId: createSection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectionInput"
      tags:
        - sections
  "/sections/{sectionId}":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      summary: Get Section
      description: Get Section
      operationId: getSectionById
      tags:
        - sections
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
    put:
      summary: Update Section
      description: Update Section
      operationId: updateSectionById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectionInput"
      tags:
        - sections
    delete:
      summary: Delete Section
      description: Delete Section
      operationId: deleteSectionById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - sections
  "/sections/{sectionId}/roles":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: Your GET endpoint
      tags:
        - sections
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Roles
                description: A list of roles
                type: object
                properties:
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/RoleData"
                required:
                  - roles
      operationId: getSectionRolesById
  /lists:
    get:
      summary: Your GET endpoint
      description: getLists
      operationId: getLists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/List"
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      tags:
        - lists
    post:
      summary: ""
      description: createList
      operationId: createList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
      tags:
        - lists
  "/lists/{listId}":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getListById
      operationId: getListById
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
    put:
      summary: ""
      description: updateListById
      operationId: updateListById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
      tags:
        - lists
    delete:
      summary: ""
      description: deleteListById
      operationId: deleteListById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - lists
  "/lists/{listId}/members":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getListMembersById
      operationId: getListMembersById
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Members
                type: array
                items:
                  $ref: "#/components/schemas/MemberData"
  "/lists/{listId}/rules":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getListRulesById
      operationId: getListRulesById
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListRule"
    post:
      summary: ""
      description: createListRuleById
      operationId: createListRuleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRule"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRule"
      tags:
        - lists
  "/lists/{listId}/rules/{ruleId}":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
      - schema:
          type: integer
        name: ruleId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getListRuleById
      operationId: getListRuleById
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRule"
    put:
      summary: ""
      description: updateListRuleById
      operationId: updateListRuleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRule"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRule"
      tags:
        - lists
    delete:
      summary: ""
      description: deleteListRuleById
      operationId: deleteListRuleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - lists
  /lists/types:
    get:
      summary: Your GET endpoint
      description: getListTypes
      operationId: getListTypes
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListType"
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
    post:
      summary: ""
      description: createListTypes
      operationId: createListTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListType"
      tags:
        - lists
  "/lists/types/{listTypeId}":
    parameters:
      - schema:
          type: integer
        name: listTypeId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      description: getListTypeById
      operationId: getListTypeById
      tags:
        - lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListType"
    put:
      summary: ""
      description: updateListTypeById
      operationId: updateListTypeById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListType"
      tags:
        - lists
    delete:
      summary: ""
      description: deleteListTypeById
      operationId: deleteListTypeById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      tags:
        - lists
components:
  schemas:
    ApiResponse:
      title: ApiResponse
      type: object
      description: ""
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
    MemberInput:
      title: MemberInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        firstname:
          type: string
        lastname:
          type: string
        nickname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        dateOfBirth:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        membershipNumber:
          type: string
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        gender:
          type: string
        email:
          type: string
        schoolName:
          type: string
        schoolYearLevel:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/MemberOverrideData"
    MemberData:
      title: MemberData
      type: object
      properties:
        id:
          type: integer
        state:
          enum:
            - enabled
            - disabled
          type: string
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        firstname:
          type: string
        lastname:
          type: string
        nickname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        dateOfBirth:
          type: string
          format: date
        membershipNumber:
          type: string
        email:
          type: string
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        gender:
          type: string
        schoolName:
          type: string
        schoolYearLevel:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/MemberOverrideData"
      required:
        - id
        - firstname
        - lastname
    MemberOverrideData:
      title: MemberOverrideData
      type: object
      properties:
        firstname:
          type: boolean
          default: false
        lastname:
          type: boolean
          default: false
        nickname:
          type: boolean
          default: false
        address:
          type: boolean
          default: false
        dateOfBirth:
          type: boolean
          default: false
        email:
          type: boolean
          default: false
        phoneHome:
          type: boolean
          default: false
        phoneMobile:
          type: boolean
          default: false
        phoneWork:
          type: boolean
          default: false
        gender:
          type: boolean
          default: false
        schoolName:
          type: boolean
          default: false
        schoolYearLevel:
          type: boolean
          default: false
    MemberSuggetion:
      title: MemberSuggetion
      type: object
      properties:
        id:
          type: string
    AddressData:
      title: AddressData
      type: object
      properties:
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
      required:
        - street1
        - city
        - state
        - postcode
    RoleInput:
      title: RoleInput
      type: object
      properties:
        name:
          type: string
        classId:
          type: string
        normalisedClassId:
          type: string
        externalId:
          type: string
        sectionId:
          type: integer
      required:
        - name
        - sectionId
    RoleData:
      title: RoleData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        classId:
          type: string
        normalisedClassId:
          type: string
        externalId:
          type: string
        section:
          $ref: "#/components/schemas/SectionData"
      required:
        - id
        - name
        - section
    MemberRoleInput:
      title: MemberRoleInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
    MemberRoleData:
      title: MemberRoleData
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        memberId:
          type: integer
        role:
          $ref: "#/components/schemas/RoleData"
      required:
        - state
        - managementState
        - memberId
        - role
    ContactInput:
      title: ContactInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        firstname:
          type: string
        nickname:
          type: string
        lastname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        relationship:
          type: string
        primaryContact:
          type: boolean
        email:
          type: string
        occupation:
          type: string
        memberId:
          type: integer
        parentId:
          type: integer
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/ContactOverrideData"
    ContactData:
      title: ContactData
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
          enum:
            - enabled
            - disabled
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        memberId:
          type: integer
        parentId:
          type: integer
        firstname:
          type: string
        nickname:
          type: string
        lastname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        relationship:
          type: string
        primaryContact:
          type: boolean
        email:
          type: string
        occupation:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/ContactOverrideData"
      required:
        - id
        - state
        - managementState
        - memberId
        - firstname
        - lastname
    ContactOverrideData:
      title: ContactOverrideData
      type: object
      properties:
        firstname:
          type: boolean
          default: false
        nickname:
          type: boolean
          default: false
        lastname:
          type: boolean
          default: false
        address:
          type: boolean
          default: false
        phoneHome:
          type: boolean
          default: false
        phoneMobile:
          type: boolean
          default: false
        phoneWork:
          type: boolean
          default: false
        relationship:
          type: boolean
          default: false
        primaryContact:
          type: boolean
          default: false
        email:
          type: boolean
          default: false
        occupation:
          type: boolean
          default: false
    ScoutGroupInput:
      title: ScoutGroupInput
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
      required:
        - name
    ScoutGroupData:
      title: ScoutGroupData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        externalId:
          type: string
      required:
        - id
        - name
    SectionInput:
      title: SectionInput
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
        scoutGroupId:
          type: integer
      required:
        - name
        - scoutGroupId
    SectionData:
      title: SectionData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        externalId:
          type: string
        scoutGroup:
          $ref: "#/components/schemas/ScoutGroupData"
      required:
        - id
        - name
        - scoutGroup
    List:
      title: List
      type: object
      properties:
        id:
          type: string
    ListRule:
      title: ListRule
      type: object
      properties:
        id:
          type: string
    ListType:
      title: ListType
      type: object
      properties:
        id:
          type: string
  requestBodies: {}
  securitySchemes:
    contact_auth:
      type: apiKey
      name: x-auth-token
      in: header
  links: {}
  callbacks: {}
security:
  - contact_auth: []
