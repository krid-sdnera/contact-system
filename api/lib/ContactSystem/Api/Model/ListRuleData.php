<?php
/**
 * ListRuleData
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Contact System API
 *
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ListRuleData model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ListRuleData 
{
        /**
     * @var int
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $id;

    /**
     * @var string
     * @SerializedName("label")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $label;

    /**
     * @var string
     * @SerializedName("comment")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $comment;

    /**
     * @var int
     * @SerializedName("listId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $listId;

    /**
     * @var string
     * @SerializedName("listName")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $listName;

    /**
     * @var string
     * @SerializedName("listAddress")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $listAddress;

    /**
     * @var string
     * @SerializedName("relationType")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $relationType;

    /**
     * @var int
     * @SerializedName("relationId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $relationId;

    /**
     * @var string
     * @SerializedName("relationName")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $relationName;

    /**
     * @var bool
     * @SerializedName("useMember")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $useMember;

    /**
     * @var bool
     * @SerializedName("useContact")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $useContact;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->label = isset($data['label']) ? $data['label'] : null;
        $this->comment = isset($data['comment']) ? $data['comment'] : null;
        $this->listId = isset($data['listId']) ? $data['listId'] : null;
        $this->listName = isset($data['listName']) ? $data['listName'] : null;
        $this->listAddress = isset($data['listAddress']) ? $data['listAddress'] : null;
        $this->relationType = isset($data['relationType']) ? $data['relationType'] : null;
        $this->relationId = isset($data['relationId']) ? $data['relationId'] : null;
        $this->relationName = isset($data['relationName']) ? $data['relationName'] : null;
        $this->useMember = isset($data['useMember']) ? $data['useMember'] : null;
        $this->useContact = isset($data['useContact']) ? $data['useContact'] : null;
    }

    /**
     * Gets id.
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId(int $id): int
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets label.
     *
     * @return string
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * Sets label.
     *
     * @param string $label
     *
     * @return $this
     */
    public function setLabel(string $label): string
    {
        $this->label = $label;

        return $this;
    }

    /**
     * Gets comment.
     *
     * @return string
     */
    public function getComment(): string
    {
        return $this->comment;
    }

    /**
     * Sets comment.
     *
     * @param string $comment
     *
     * @return $this
     */
    public function setComment(string $comment): string
    {
        $this->comment = $comment;

        return $this;
    }

    /**
     * Gets listId.
     *
     * @return int
     */
    public function getListId(): int
    {
        return $this->listId;
    }

    /**
     * Sets listId.
     *
     * @param int $listId
     *
     * @return $this
     */
    public function setListId(int $listId): int
    {
        $this->listId = $listId;

        return $this;
    }

    /**
     * Gets listName.
     *
     * @return string
     */
    public function getListName(): string
    {
        return $this->listName;
    }

    /**
     * Sets listName.
     *
     * @param string $listName
     *
     * @return $this
     */
    public function setListName(string $listName): string
    {
        $this->listName = $listName;

        return $this;
    }

    /**
     * Gets listAddress.
     *
     * @return string
     */
    public function getListAddress(): string
    {
        return $this->listAddress;
    }

    /**
     * Sets listAddress.
     *
     * @param string $listAddress
     *
     * @return $this
     */
    public function setListAddress(string $listAddress): string
    {
        $this->listAddress = $listAddress;

        return $this;
    }

    /**
     * Gets relationType.
     *
     * @return string
     */
    public function getRelationType(): string
    {
        return $this->relationType;
    }

    /**
     * Sets relationType.
     *
     * @param string $relationType
     *
     * @return $this
     */
    public function setRelationType(string $relationType): string
    {
        $this->relationType = $relationType;

        return $this;
    }

    /**
     * Gets relationId.
     *
     * @return int
     */
    public function getRelationId(): int
    {
        return $this->relationId;
    }

    /**
     * Sets relationId.
     *
     * @param int $relationId
     *
     * @return $this
     */
    public function setRelationId(int $relationId): int
    {
        $this->relationId = $relationId;

        return $this;
    }

    /**
     * Gets relationName.
     *
     * @return string
     */
    public function getRelationName(): string
    {
        return $this->relationName;
    }

    /**
     * Sets relationName.
     *
     * @param string $relationName
     *
     * @return $this
     */
    public function setRelationName(string $relationName): string
    {
        $this->relationName = $relationName;

        return $this;
    }

    /**
     * Gets useMember.
     *
     * @return bool
     */
    public function isUseMember(): bool
    {
        return $this->useMember;
    }

    /**
     * Sets useMember.
     *
     * @param bool $useMember
     *
     * @return $this
     */
    public function setUseMember(bool $useMember): bool
    {
        $this->useMember = $useMember;

        return $this;
    }

    /**
     * Gets useContact.
     *
     * @return bool
     */
    public function isUseContact(): bool
    {
        return $this->useContact;
    }

    /**
     * Sets useContact.
     *
     * @param bool $useContact
     *
     * @return $this
     */
    public function setUseContact(bool $useContact): bool
    {
        $this->useContact = $useContact;

        return $this;
    }
}


