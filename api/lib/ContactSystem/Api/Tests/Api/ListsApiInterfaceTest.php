<?php
/**
 * ListsApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Contact System API
 *
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * ListsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class ListsApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createList
     *
     * Create List.
     *
     */
    public function testCreateList()
    {
        $client = static::createClient();

        $path = '/lists';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for createListRuleByListId
     *
     * Create List Rule By List ID.
     *
     */
    public function testCreateListRuleByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/list-rules';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for deleteListById
     *
     * Delete List By ID.
     *
     */
    public function testDeleteListById()
    {
        $client = static::createClient();

        $path = '/lists/{listId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for deleteListRuleByListId
     *
     * Delete List Rule By List ID.
     *
     */
    public function testDeleteListRuleByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/rules/{ruleId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ruleId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for getListByAddress
     *
     * Get List By Address.
     *
     */
    public function testGetListByAddress()
    {
        $client = static::createClient();

        $path = '/lists/address/{listAddress}';
        $pattern = '{listAddress}';
        $data = $this->genTestData('.+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getListById
     *
     * Get List By ID.
     *
     */
    public function testGetListById()
    {
        $client = static::createClient();

        $path = '/lists/{listId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getListRecipientsByListId
     *
     * Get List Recipients By List ID.
     *
     */
    public function testGetListRecipientsByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/recipients';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getListRuleByListId
     *
     * Get List Rule By List ID.
     *
     */
    public function testGetListRuleByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/rules/{ruleId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ruleId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getListRulesByListId
     *
     * Get List Rules By List ID.
     *
     */
    public function testGetListRulesByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/list-rules';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getLists
     *
     * Get Lists.
     *
     */
    public function testGetLists()
    {
        $client = static::createClient();

        $path = '/lists';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for updateListById
     *
     * Update List By ID.
     *
     */
    public function testUpdateListById()
    {
        $client = static::createClient();

        $path = '/lists/{listId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for updateListRuleByListId
     *
     * Update List Rule By List ID.
     *
     */
    public function testUpdateListRuleByListId()
    {
        $client = static::createClient();

        $path = '/lists/{listId}/rules/{ruleId}';
        $pattern = '{listId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ruleId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
