openapi: 3.0.0
servers:
  - url: "https://{subdomain}.essendonseascouts.org.au/api/{version}"
    variables:
      subdomain:
        description: "Subdomain, related to environment"
        default: membership
        enum:
          - stg-membership
          - membership
      version:
        description: API Version
        default: v1
        enum:
          - v1
    description: Moonee Valley Contact System
  - url: "http://localhost:8000/api/{version}"
    variables:
      version:
        description: API Version
        default: v1
        enum:
          - v1
    description: MVD CS Dev
info:
  description: This is the spec for the Constact system API
  version: 1.0.0
  title: Contact System API
  termsOfService: ""
  contact:
    email: dirk@arends.com.au
    name: Dirk Arends
tags:
  - name: Auth
    description: Everything you need to handle `auth`
  - name: Members
    description: Everything you need to handle `members`
  - name: Contacts
    description: Everything you need to handle `contacts`
  - name: Roles
    description: Everything you need to handle `roles`
  - name: Sections
    description: Everything you need to handle `sections`
  - name: ScoutGroups
    description: Everything you need to handle `groups`
  - name: Lists
    description: Everything you need to handle `lists`
paths:
  /members:
    get:
      operationId: getMembers
      summary: List all members
      description: List all members
      tags: [Members]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                title: Members
                description: A list of members
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  members:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberData"
                required:
                  - members
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createMember
      summary: Create a member
      description: Create a member
      tags: [Members]
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
  "/members/{memberId}":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getMemberById
      summary: Get Member
      description: Get details for a member
      tags: [Members]
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
    put:
      operationId: updateMemberById
      summary: Update Member
      description: Update member
      tags: [Members]
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
    patch:
      operationId: patchMemberById
      summary: Partial Update Member
      description: Partially update member
      tags: [Members]
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberInput"
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberData"
    delete:
      operationId: deleteMemberById
      summary: Delete member
      description: Delete a member
      tags: [Members]
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/members/{memberId}/contacts":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getMemberContactsById
      summary: List member's contacts
      description: List contacts for this member
      tags: [Members]
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Contacts
                description: A list of contacts
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  contacts:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ContactData"
                required:
                  - contacts
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/members/{memberId}/roles":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getMemberRolesById
      summary: List member's roles
      description: List roles for this member
      tags: [Members]
      parameters:
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: MemberRoles
                description: A list of roles
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberRoleData"
                required:
                  - roles
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/members/{memberId}/roles/{roleId}":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    put:
      operationId: addMemberRoleById
      summary: Add Member Role
      description: Add Member Role
      tags: [Members]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberRoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberRoleData"
    delete:
      operationId: removeMemberRoleById
      summary: Remove Member Role
      description: Remove Member Role
      tags: [Members]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/members/{memberId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
    get:
      operationId: getListRulesByMemberId
      summary: Get List Rules by Member ID
      description: Get List Rules by Member ID
      tags: [Members]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/members/{memberId}/merge_into/{mergeMemberId}":
    parameters:
      - schema:
          type: integer
        name: memberId
        in: path
        required: true
      - schema:
          type: integer
        name: mergeMemberId
        in: path
        required: true
    post:
      operationId: mergeMember
      summary: Merge member
      description: Merge member
      tags: [Members]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /roles:
    get:
      operationId: getRoles
      summary: Get roles
      description: Get roles
      tags: [Roles]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Roles
                description: A list of roles
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/RoleData"
                required:
                  - roles
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createRole
      summary: Create role
      description: Create role
      tags: [Roles]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
  "/roles/{roleId}":
    parameters:
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    get:
      operationId: getRoleById
      summary: Get Role
      description: Get role
      tags: [Roles]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
    put:
      operationId: updateRoleById
      summary: Update role
      description: Update role
      tags: [Roles]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleData"
    delete:
      operationId: deleteRoleById
      summary: Delete role
      description: Delete role
      tags: [Roles]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/roles/{roleId}/members":
    parameters:
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    get:
      operationId: getMembersByRoleId
      summary: List members by role
      description: List all members in this role
      tags: [Roles]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                title: Members
                description: A list of members
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  members:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberData"
                required:
                  - members
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/roles/{roleId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: roleId
        in: path
        required: true
    get:
      operationId: getListRulesByRoleId
      summary: List Rules by Role ID
      description: List Rules by Role ID
      tags: [Roles]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  /contacts:
    get:
      operationId: getContacts
      summary: List Contacts
      description: Returns a list of Contacts
      tags: [Contacts]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Contacts
                description: A list of contacts
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  contacts:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ContactData"
                required:
                  - contacts
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createContact
      summary: Create Contact
      description: create Contact
      tags: [Contacts]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
  "/contacts/{contactId}":
    parameters:
      - schema:
          type: integer
        name: contactId
        in: path
        required: true
    get:
      operationId: getContactById
      summary: Get Contact By ID
      description: Get Contact By ID
      tags: [Contacts]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
    put:
      operationId: updateContactById
      summary: Update Contact By ID
      description: Update Contact By ID
      tags: [Contacts]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
    patch:
      operationId: patchContactById
      summary: Patch Contact By ID
      description: Patch Contact By ID
      tags: [Contacts]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
        description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactData"
    delete:
      operationId: deleteContactById
      summary: Delete Contact By ID
      description: Delete Contact By ID
      tags: [Contacts]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/contacts/{contactId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: contactId
        in: path
        required: true
    get:
      operationId: getListRulesByContactId
      summary: Get List Rules By Contact ID
      description: Get List Rules By Contact ID
      tags: [Contacts]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  /groups:
    get:
      operationId: getScoutGroups
      summary: Get Groups
      description: Get Groups
      tags: [ScoutGroups]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Scout Groups
                description: A list of scout groups
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  scoutGroups:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ScoutGroupData"
                required:
                  - scoutGroups
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createScoutGroup
      summary: Create Group
      description: Create Group
      tags: [ScoutGroups]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoutGroupInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
  "/groups/{scoutGroupId}":
    parameters:
      - schema:
          type: integer
        name: scoutGroupId
        in: path
        required: true
    get:
      operationId: getScoutGroupById
      summary: Get Group
      description: Get Group
      tags: [ScoutGroups]
      responses:
        "200":
          description: "OK  "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
    put:
      operationId: updateScoutGroupById
      summary: Update Group
      description: Update Group
      tags: [ScoutGroups]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoutGroupInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoutGroupData"
    delete:
      operationId: deleteScoutGroupById
      summary: Delete Group
      description: Delete Group
      tags: [ScoutGroups]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/groups/{scoutGroupId}/sections":
    parameters:
      - schema:
          type: integer
        name: scoutGroupId
        in: path
        required: true
    get:
      operationId: getScoutGroupSectionsByScoutGroupId
      summary: Get Scout Group Sections By Scout Group ID
      description: Get Scout Group Sections By Scout Group ID
      tags: [ScoutGroups]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Sections
                description: A list of sections
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  sections:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/SectionData"
                required:
                  - sections
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/groups/{scoutGroupId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: scoutGroupId
        in: path
        required: true
    get:
      operationId: getListRulesByScoutGroupId
      summary: Get List Rules By Scout Group ID
      description: Get List Rules By Scout Group ID
      tags: [ScoutGroups]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  /sections:
    get:
      operationId: getSections
      summary: Get Sections
      description: Get Sections
      tags: [Sections]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Sections
                description: A list of sections
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  sections:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/SectionData"
                required:
                  - sections
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createSection
      summary: Create Section
      description: Create Section
      tags: [Sections]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectionInput"
  "/sections/{sectionId}":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      operationId: getSectionById
      summary: Get Section
      description: Get Section
      tags: [Sections]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
    put:
      operationId: updateSectionById
      summary: Update Section
      description: Update Section
      tags: [Sections]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectionInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectionData"
    delete:
      operationId: deleteSectionById
      summary: Delete Section
      description: Delete Section
      tags: [Sections]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/sections/{sectionId}/members":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      operationId: getMembersBySectionId
      summary: List members by section
      description: List all members in this section
      tags: [Sections]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                title: Members
                description: A list of members
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  members:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/MemberData"
                required:
                  - members
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/sections/{sectionId}/roles":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      operationId: getSectionRolesBySectionId
      summary: List Section Roles By Section ID
      description: List Section Roles By Section ID
      tags: [Sections]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Roles
                description: A list of roles
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  roles:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/RoleData"
                required:
                  - roles
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/sections/{sectionId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: sectionId
        in: path
        required: true
    get:
      operationId: getListRulesBySectionId
      summary: Get List Rules By Section ID
      description: Get List Rules By Section ID
      tags: [Sections]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  /lists:
    get:
      operationId: getLists
      summary: Get Lists
      description: Get Lists
      tags: [Lists]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Lists
                description: A list of lists
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  lists:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListData"
                required:
                  - lists
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createList
      summary: Create List
      description: Create List
      tags: [Lists]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListData"
  "/lists/{listId}":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      operationId: getListById
      summary: Get List By ID
      description: Get List By ID
      tags: [Lists]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListData"
    put:
      operationId: updateListById
      summary: Update List By ID
      description: Update List By ID
      tags: [Lists]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListData"
    delete:
      operationId: deleteListById
      summary: Delete List By ID
      description: Delete List By ID
      tags: [Lists]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  "/lists/address/{listAddress}":
    parameters:
      - schema:
          type: string
          pattern: .+
        name: listAddress
        in: path
        required: true
    get:
      operationId: getListByAddress
      summary: Get List By Address
      description: Get List By Address
      tags: [Lists]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListData"
  "/lists/{listId}/recipients":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      operationId: getListRecipientsByListId
      summary: Get List Recipients By List ID
      description: Get List Recipients By List ID
      tags: [Lists]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Recipients
                description: A list of recipients
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  recipients:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/RecipientData"
                required:
                  - recipients
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
  "/lists/{listId}/list-rules":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
    get:
      operationId: getListRulesByListId
      summary: Get List Rules By List ID
      description: Get List Rule By List ID
      tags: [Lists]
      parameters:
        - schema:
            type: string
          in: query
          name: query
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: integer
          in: query
          name: page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: ListRules
                description: A list of list rules
                type: object
                properties:
                  totalItems:
                    description: Total number of items
                    type: integer
                  totalPages:
                    description: Total number of pages
                    type: integer
                  page:
                    description: Current page number
                    type: integer
                  pageSize:
                    description: Number of items in this page
                    type: integer
                  rules:
                    description: Array containg the list
                    type: array
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/ListRuleData"
                required:
                  - rules
                  - totalItems
                  - totalPages
                  - page
                  - pageSize
    post:
      operationId: createListRuleByListId
      summary: Create List Rule By List ID
      description: Create List Rule By List ID
      tags: [Lists]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRuleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRuleData"
  "/lists/{listId}/rules/{ruleId}":
    parameters:
      - schema:
          type: integer
        name: listId
        in: path
        required: true
      - schema:
          type: integer
        name: ruleId
        in: path
        required: true
    get:
      operationId: getListRuleByListId
      summary: Get List Rule By List ID
      description: Get List Rule By List ID
      tags: [Lists]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRuleData"
    put:
      operationId: updateListRuleByListId
      summary: Update List Rule By List ID
      description: Update List Rule By List ID
      tags: [Lists]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRuleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRuleData"
    delete:
      operationId: deleteListRuleByListId
      summary: Delete List Rule By List ID
      description: Delete List Rule By List ID
      tags: [Lists]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /auth/token:
    post:
      operationId: getJWT
      summary: Get JWT
      description: Get a JWT
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JwtInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security: []
  /auth/token/refresh:
    post:
      operationId: refreshJWT
      summary: Refresh JWT
      description: Refresh a JWT
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/JwtRefreshInput"
            example:
              refresh_token: "..."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security: []
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JwtErrorData"
  schemas:
    ApiResponse:
      title: ApiResponse
      type: object
      description: ""
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
    JwtErrorResponse:
      oneOf:
        - $ref: "#/components/schemas/JwtData"
        - $ref: "#/components/schemas/JwtErrorData"
      type: object
    JwtInput:
      title: User credentials
      description: User credentials
      type: object
      properties:
        username:
          description: Your username
          type: string
        password:
          description: Your password
          type: string
      required:
        - username
        - password
    JwtRefreshInput:
      title: JWT Refresh Token
      description: JWT Refresh Token
      type: object
      properties:
        refresh_token:
          description: The refresh token
          type: string
      required:
        - refresh_token
    JwtData:
      title: JWT Auth Token
      description: A JSON Web Token
      type: object
      properties:
        token:
          description: The JSON Web Token
          type: string
        refresh_token:
          description: A refresh token for the JSON Web Token
          type: string
      required:
        - token
        - refresh_token
    JwtErrorData:
      title: JWT Error message
      description: JSON Error message
      type: object
      properties:
        code:
          description: Error code
          type: integer
        message:
          description: Error message
          type: string
      required:
        - code
        - message
    MemberInput:
      title: MemberInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        firstname:
          type: string
        lastname:
          type: string
        nickname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        dateOfBirth:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        membershipNumber:
          type: string
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        gender:
          type: string
        email:
          type: string
        schoolName:
          type: string
        schoolYearLevel:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/MemberOverrideData"
    MemberData:
      title: MemberData
      type: object
      properties:
        id:
          type: integer
        state:
          enum:
            - enabled
            - disabled
          type: string
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        firstname:
          type: string
        lastname:
          type: string
        nickname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        dateOfBirth:
          type: string
          format: date
        membershipNumber:
          type: string
        membershipUpdateLink:
          type: string
        autoUpgradeEnabled:
          type: boolean
        email:
          type: string
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        gender:
          type: string
        schoolName:
          type: string
        schoolYearLevel:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/MemberOverrideData"
        metaInvite:
          $ref: "#/components/schemas/MemberMetaInviteData"
      required:
        - id
        - firstname
        - lastname
    MemberOverrideData:
      title: MemberOverrideData
      type: object
      properties:
        firstname:
          type: boolean
          default: false
        lastname:
          type: boolean
          default: false
        nickname:
          type: boolean
          default: false
        address:
          type: boolean
          default: false
        dateOfBirth:
          type: boolean
          default: false
        email:
          type: boolean
          default: false
        phoneHome:
          type: boolean
          default: false
        phoneMobile:
          type: boolean
          default: false
        phoneWork:
          type: boolean
          default: false
        gender:
          type: boolean
          default: false
        schoolName:
          type: boolean
          default: false
        schoolYearLevel:
          type: boolean
          default: false
    MemberMetaInviteData:
      title: MemberMetaInviteData
      type: object
      nullable: true
      properties:
        type:
          type: string
        expiryDate:
          type: string
        status:
          type: string
        submittedDate:
          type: string
        levelDescription:
          type: string
        appAge:
          type: string
        currentAppTimestamp:
          type: string
      required:
        - type
    MemberSuggetion:
      title: MemberSuggetion
      type: object
      properties:
        id:
          type: string
    AddressData:
      title: AddressData
      type: object
      properties:
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
      required:
        - street1
        - city
        - state
        - postcode
    RoleInput:
      title: RoleInput
      type: object
      properties:
        name:
          type: string
        classId:
          type: string
        normalisedClassId:
          type: string
        externalId:
          type: string
        sectionId:
          type: integer
      required:
        - name
        - sectionId
    RoleData:
      title: RoleData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        classId:
          type: string
        normalisedClassId:
          type: string
        externalId:
          type: string
        section:
          $ref: "#/components/schemas/SectionData"
      required:
        - id
        - name
        - section
    RecipientData:
      title: RecipientData
      type: object
      properties:
        rowId:
          type: string
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        address:
          type: string
        listId:
          type: integer
        listName:
          type: string
        listAddress:
          type: string
        contributingRuleIds:
          type: array
          uniqueItems: true
          items:
            type: string
      required:
        - rowId
        - id
        - name
        - type
        - address
        - listId
        - listName
        - listAddress
        - contributingRuleIds
    MemberRoleInput:
      title: MemberRoleInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
    MemberRoleData:
      title: MemberRoleData
      type: object
      properties:
        id:
          type: string
        state:
          type: string
          enum:
            - enabled
            - disabled
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        memberId:
          type: integer
        role:
          $ref: "#/components/schemas/RoleData"
      required:
        - id
        - state
        - managementState
        - memberId
        - role
    ContactInput:
      title: ContactInput
      type: object
      properties:
        state:
          type: string
          enum:
            - enabled
            - disabled
        firstname:
          type: string
        nickname:
          type: string
        lastname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        relationship:
          type: string
        primaryContact:
          type: boolean
        email:
          type: string
        occupation:
          type: string
        memberId:
          type: integer
        parentId:
          type: integer
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/ContactOverrideData"
    ContactData:
      title: ContactData
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
          enum:
            - enabled
            - disabled
        managementState:
          type: string
          enum:
            - managed
            - unmanaged
        memberId:
          type: integer
        parentId:
          type: integer
        firstname:
          type: string
        nickname:
          type: string
        lastname:
          type: string
        address:
          $ref: "#/components/schemas/AddressData"
        phoneHome:
          type: string
        phoneMobile:
          type: string
        phoneWork:
          type: string
        relationship:
          type: string
        primaryContact:
          type: boolean
        email:
          type: string
        occupation:
          type: string
        expiry:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        overrides:
          $ref: "#/components/schemas/ContactOverrideData"
      required:
        - id
        - state
        - managementState
        - memberId
        - firstname
        - lastname
    ContactOverrideData:
      title: ContactOverrideData
      type: object
      properties:
        firstname:
          type: boolean
          default: false
        nickname:
          type: boolean
          default: false
        lastname:
          type: boolean
          default: false
        address:
          type: boolean
          default: false
        phoneHome:
          type: boolean
          default: false
        phoneMobile:
          type: boolean
          default: false
        phoneWork:
          type: boolean
          default: false
        relationship:
          type: boolean
          default: false
        primaryContact:
          type: boolean
          default: false
        email:
          type: boolean
          default: false
        occupation:
          type: boolean
          default: false
    ScoutGroupInput:
      title: ScoutGroupInput
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
      required:
        - name
    ScoutGroupData:
      title: ScoutGroupData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        externalId:
          type: string
      required:
        - id
        - name
    SectionInput:
      title: SectionInput
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
        scoutGroupId:
          type: integer
      required:
        - name
        - scoutGroupId
    SectionData:
      title: SectionData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        externalId:
          type: string
        scoutGroup:
          $ref: "#/components/schemas/ScoutGroupData"
      required:
        - id
        - name
        - scoutGroup
    ListInput:
      title: ListInput
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address
    ListData:
      title: ListData
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
      required:
        - id
        - name
        - address
    ListRuleInput:
      title: ListRuleInput
      type: object
      properties:
        label:
          type: string
        comment:
          type: string
        contactId:
          type: integer
          nullable: true
        memberId:
          type: integer
          nullable: true
        roleId:
          type: integer
          nullable: true
        sectionId:
          type: integer
          nullable: true
        scoutGroupId:
          type: integer
          nullable: true
        useMember:
          type: boolean
        useContact:
          type: boolean
      required:
        - label
        - comment
        - useMember
        - useContact
    ListRuleData:
      title: ListRuleData
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        comment:
          type: string
        listId:
          type: integer
        listName:
          type: string
        listAddress:
          type: string
        relationType:
          type: string
        relationId:
          type: integer
        relationName:
          type: string
        useMember:
          type: boolean
        useContact:
          type: boolean
      required:
        - id
        - label
        - comment
        - listId
        - listName
        - listAddress
        - relationType
        - relationId
        - relationName
        - useMember
        - useContact
  securitySchemes:
    contact_auth:
      type: apiKey
      name: x-auth-token
      in: header
    jwt_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - contact_auth: []
  - jwt_auth: []
