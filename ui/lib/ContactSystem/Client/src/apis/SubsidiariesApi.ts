/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MemberData,
    MemberDataFromJSON,
    MemberDataToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    SubsidiaryData,
    SubsidiaryDataFromJSON,
    SubsidiaryDataToJSON,
    SubsidiaryInput,
    SubsidiaryInputFromJSON,
    SubsidiaryInputToJSON,
} from '../models';

export interface AddSubsidiaryLocalMarkerByIdRequest {
    subsidiaryId: string;
}

export interface DeleteSubsidiaryByIdRequest {
    subsidiaryId: string;
}

export interface GetSubsidiaryByIdRequest {
    subsidiaryId: string;
}

export interface GetSubsidiaryMembersByIdRequest {
    subsidiaryId: string;
}

export interface RemoveSubsidiaryLocalMarkerByIdRequest {
    subsidiaryId: string;
}

export interface UpdateSubsidiaryByIdRequest {
    subsidiaryId: string;
    subsidiaryInput?: SubsidiaryInput;
}

/**
 * SubsidiariesApi - interface
 * @export
 * @interface SubsidiariesApiInterface
 */
export interface SubsidiariesApiInterface {
    /**
     * Add local marker
     * @summary Add local marker
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    addSubsidiaryLocalMarkerByIdRaw(requestParameters: AddSubsidiaryLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Add local marker
     * Add local marker
     */
    addSubsidiaryLocalMarkerById(requestParameters: AddSubsidiaryLocalMarkerByIdRequest): Promise<ModelApiResponse>;

    /**
     * Create subsidiary
     * @summary Create subsidiary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    createSubsidiaryRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     * Create subsidiary
     * Create subsidiary
     */
    createSubsidiary(): Promise<void>;

    /**
     * Delete Subsidiary
     * @summary Delete Subsidiary
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    deleteSubsidiaryByIdRaw(requestParameters: DeleteSubsidiaryByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete Subsidiary
     * Delete Subsidiary
     */
    deleteSubsidiaryById(requestParameters: DeleteSubsidiaryByIdRequest): Promise<ModelApiResponse>;

    /**
     * Get Subsidiary
     * @summary Get Subsidiary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    getSubsidiaryRaw(): Promise<runtime.ApiResponse<Array<SubsidiaryData>>>;

    /**
     * Get Subsidiary
     * Get Subsidiary
     */
    getSubsidiary(): Promise<Array<SubsidiaryData>>;

    /**
     * Your GET endpoint
     * @summary Your GET endpoint
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    getSubsidiaryByIdRaw(requestParameters: GetSubsidiaryByIdRequest): Promise<runtime.ApiResponse<SubsidiaryData>>;

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    getSubsidiaryById(requestParameters: GetSubsidiaryByIdRequest): Promise<SubsidiaryData>;

    /**
     * Your GET endpoint
     * @summary Your GET endpoint
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    getSubsidiaryMembersByIdRaw(requestParameters: GetSubsidiaryMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>>;

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    getSubsidiaryMembersById(requestParameters: GetSubsidiaryMembersByIdRequest): Promise<Array<MemberData>>;

    /**
     * Remove local marker
     * @summary Remove local marker
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    removeSubsidiaryLocalMarkerByIdRaw(requestParameters: RemoveSubsidiaryLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Remove local marker
     * Remove local marker
     */
    removeSubsidiaryLocalMarkerById(requestParameters: RemoveSubsidiaryLocalMarkerByIdRequest): Promise<ModelApiResponse>;

    /**
     * Update subsidiary
     * @summary Update subsidiary
     * @param {string} subsidiaryId 
     * @param {SubsidiaryInput} [subsidiaryInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsidiariesApiInterface
     */
    updateSubsidiaryByIdRaw(requestParameters: UpdateSubsidiaryByIdRequest): Promise<runtime.ApiResponse<SubsidiaryData>>;

    /**
     * Update subsidiary
     * Update subsidiary
     */
    updateSubsidiaryById(requestParameters: UpdateSubsidiaryByIdRequest): Promise<SubsidiaryData>;

}

/**
 * no description
 */
export class SubsidiariesApi extends runtime.BaseAPI implements SubsidiariesApiInterface {

    /**
     * Add local marker
     * Add local marker
     */
    async addSubsidiaryLocalMarkerByIdRaw(requestParameters: AddSubsidiaryLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling addSubsidiaryLocalMarkerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}/local`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Add local marker
     * Add local marker
     */
    async addSubsidiaryLocalMarkerById(requestParameters: AddSubsidiaryLocalMarkerByIdRequest): Promise<ModelApiResponse> {
        const response = await this.addSubsidiaryLocalMarkerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create subsidiary
     * Create subsidiary
     */
    async createSubsidiaryRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create subsidiary
     * Create subsidiary
     */
    async createSubsidiary(): Promise<void> {
        await this.createSubsidiaryRaw();
    }

    /**
     * Delete Subsidiary
     * Delete Subsidiary
     */
    async deleteSubsidiaryByIdRaw(requestParameters: DeleteSubsidiaryByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling deleteSubsidiaryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete Subsidiary
     * Delete Subsidiary
     */
    async deleteSubsidiaryById(requestParameters: DeleteSubsidiaryByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteSubsidiaryByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Subsidiary
     * Get Subsidiary
     */
    async getSubsidiaryRaw(): Promise<runtime.ApiResponse<Array<SubsidiaryData>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubsidiaryDataFromJSON));
    }

    /**
     * Get Subsidiary
     * Get Subsidiary
     */
    async getSubsidiary(): Promise<Array<SubsidiaryData>> {
        const response = await this.getSubsidiaryRaw();
        return await response.value();
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSubsidiaryByIdRaw(requestParameters: GetSubsidiaryByIdRequest): Promise<runtime.ApiResponse<SubsidiaryData>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling getSubsidiaryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubsidiaryDataFromJSON(jsonValue));
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSubsidiaryById(requestParameters: GetSubsidiaryByIdRequest): Promise<SubsidiaryData> {
        const response = await this.getSubsidiaryByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSubsidiaryMembersByIdRaw(requestParameters: GetSubsidiaryMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling getSubsidiaryMembersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}/members`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberDataFromJSON));
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSubsidiaryMembersById(requestParameters: GetSubsidiaryMembersByIdRequest): Promise<Array<MemberData>> {
        const response = await this.getSubsidiaryMembersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove local marker
     * Remove local marker
     */
    async removeSubsidiaryLocalMarkerByIdRaw(requestParameters: RemoveSubsidiaryLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling removeSubsidiaryLocalMarkerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}/local`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Remove local marker
     * Remove local marker
     */
    async removeSubsidiaryLocalMarkerById(requestParameters: RemoveSubsidiaryLocalMarkerByIdRequest): Promise<ModelApiResponse> {
        const response = await this.removeSubsidiaryLocalMarkerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update subsidiary
     * Update subsidiary
     */
    async updateSubsidiaryByIdRaw(requestParameters: UpdateSubsidiaryByIdRequest): Promise<runtime.ApiResponse<SubsidiaryData>> {
        if (requestParameters.subsidiaryId === null || requestParameters.subsidiaryId === undefined) {
            throw new runtime.RequiredError('subsidiaryId','Required parameter requestParameters.subsidiaryId was null or undefined when calling updateSubsidiaryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/subsidiaries/{subsidiaryId}`.replace(`{${"subsidiaryId"}}`, encodeURIComponent(String(requestParameters.subsidiaryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubsidiaryInputToJSON(requestParameters.subsidiaryInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubsidiaryDataFromJSON(jsonValue));
    }

    /**
     * Update subsidiary
     * Update subsidiary
     */
    async updateSubsidiaryById(requestParameters: UpdateSubsidiaryByIdRequest): Promise<SubsidiaryData> {
        const response = await this.updateSubsidiaryByIdRaw(requestParameters);
        return await response.value();
    }

}
