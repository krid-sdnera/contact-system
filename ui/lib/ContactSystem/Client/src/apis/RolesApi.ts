/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListRules,
    ListRulesFromJSON,
    ListRulesToJSON,
    Members,
    MembersFromJSON,
    MembersToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    RoleData,
    RoleDataFromJSON,
    RoleDataToJSON,
    RoleInput,
    RoleInputFromJSON,
    RoleInputToJSON,
    Roles,
    RolesFromJSON,
    RolesToJSON,
} from '../models';

export interface CreateRoleRequest {
    roleInput?: RoleInput;
}

export interface DeleteRoleByIdRequest {
    roleId: number;
}

export interface GetListRulesByRoleIdRequest {
    roleId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetMembersByRoleIdRequest {
    roleId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetRoleByIdRequest {
    roleId: number;
}

export interface GetRolesRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface UpdateRoleByIdRequest {
    roleId: number;
    roleInput?: RoleInput;
}

/**
 * RolesApi - interface
 * 
 * @export
 * @interface RolesApiInterface
 */
export interface RolesApiInterface {
    /**
     * Create role
     * @summary Create role
     * @param {RoleInput} [roleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>>;

    /**
     * Create role
     * Create role
     */
    createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit): Promise<RoleData>;

    /**
     * Delete role
     * @summary Delete role
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    deleteRoleByIdRaw(requestParameters: DeleteRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete role
     * Delete role
     */
    deleteRoleById(requestParameters: DeleteRoleByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse>;

    /**
     * List Rules by Role ID
     * @summary List Rules by Role ID
     * @param {number} roleId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getListRulesByRoleIdRaw(requestParameters: GetListRulesByRoleIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListRules>>;

    /**
     * List Rules by Role ID
     * List Rules by Role ID
     */
    getListRulesByRoleId(requestParameters: GetListRulesByRoleIdRequest, initOverrides?: RequestInit): Promise<ListRules>;

    /**
     * List all members in this role
     * @summary List members by role
     * @param {number} roleId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getMembersByRoleIdRaw(requestParameters: GetMembersByRoleIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Members>>;

    /**
     * List all members in this role
     * List members by role
     */
    getMembersByRoleId(requestParameters: GetMembersByRoleIdRequest, initOverrides?: RequestInit): Promise<Members>;

    /**
     * Get role
     * @summary Get Role
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleByIdRaw(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>>;

    /**
     * Get role
     * Get Role
     */
    getRoleById(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit): Promise<RoleData>;

    /**
     * Get roles
     * @summary Get roles
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Roles>>;

    /**
     * Get roles
     * Get roles
     */
    getRoles(requestParameters: GetRolesRequest, initOverrides?: RequestInit): Promise<Roles>;

    /**
     * Update role
     * @summary Update role
     * @param {number} roleId 
     * @param {RoleInput} [roleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    updateRoleByIdRaw(requestParameters: UpdateRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>>;

    /**
     * Update role
     * Update role
     */
    updateRoleById(requestParameters: UpdateRoleByIdRequest, initOverrides?: RequestInit): Promise<RoleData>;

}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI implements RolesApiInterface {

    /**
     * Create role
     * Create role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleInputToJSON(requestParameters.roleInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDataFromJSON(jsonValue));
    }

    /**
     * Create role
     * Create role
     */
    async createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit): Promise<RoleData> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete role
     * Delete role
     */
    async deleteRoleByIdRaw(requestParameters: DeleteRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling deleteRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete role
     * Delete role
     */
    async deleteRoleById(requestParameters: DeleteRoleByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.deleteRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Rules by Role ID
     * List Rules by Role ID
     */
    async getListRulesByRoleIdRaw(requestParameters: GetListRulesByRoleIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListRules>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getListRulesByRoleId.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles/{roleId}/list-rules`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRulesFromJSON(jsonValue));
    }

    /**
     * List Rules by Role ID
     * List Rules by Role ID
     */
    async getListRulesByRoleId(requestParameters: GetListRulesByRoleIdRequest, initOverrides?: RequestInit): Promise<ListRules> {
        const response = await this.getListRulesByRoleIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all members in this role
     * List members by role
     */
    async getMembersByRoleIdRaw(requestParameters: GetMembersByRoleIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Members>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getMembersByRoleId.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles/{roleId}/members`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersFromJSON(jsonValue));
    }

    /**
     * List all members in this role
     * List members by role
     */
    async getMembersByRoleId(requestParameters: GetMembersByRoleIdRequest, initOverrides?: RequestInit): Promise<Members> {
        const response = await this.getMembersByRoleIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get role
     * Get Role
     */
    async getRoleByIdRaw(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDataFromJSON(jsonValue));
    }

    /**
     * Get role
     * Get Role
     */
    async getRoleById(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit): Promise<RoleData> {
        const response = await this.getRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get roles
     * Get roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Roles>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesFromJSON(jsonValue));
    }

    /**
     * Get roles
     * Get roles
     */
    async getRoles(requestParameters: GetRolesRequest, initOverrides?: RequestInit): Promise<Roles> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update role
     * Update role
     */
    async updateRoleByIdRaw(requestParameters: UpdateRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleData>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleInputToJSON(requestParameters.roleInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDataFromJSON(jsonValue));
    }

    /**
     * Update role
     * Update role
     */
    async updateRoleById(requestParameters: UpdateRoleByIdRequest, initOverrides?: RequestInit): Promise<RoleData> {
        const response = await this.updateRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
