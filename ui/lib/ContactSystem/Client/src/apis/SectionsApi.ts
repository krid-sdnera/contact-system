/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MemberData,
    MemberDataFromJSON,
    MemberDataToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    SectionData,
    SectionDataFromJSON,
    SectionDataToJSON,
    SectionInput,
    SectionInputFromJSON,
    SectionInputToJSON,
} from '../models';

export interface AddSectionLocalMarkerByIdRequest {
    sectionId: number;
}

export interface CreateSectionRequest {
    sectionInput?: SectionInput;
}

export interface DeleteSectionByIdRequest {
    sectionId: number;
}

export interface GetSectionByIdRequest {
    sectionId: number;
}

export interface GetSectionMembersByIdRequest {
    sectionId: number;
}

export interface GetSectionsRequest {
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface RemoveSectionLocalMarkerByIdRequest {
    sectionId: number;
}

export interface UpdateSectionByIdRequest {
    sectionId: number;
    sectionInput?: SectionInput;
}

/**
 * SectionsApi - interface
 * @export
 * @interface SectionsApiInterface
 */
export interface SectionsApiInterface {
    /**
     * addSectionLocalMarkerById
     * @param {number} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    addSectionLocalMarkerByIdRaw(requestParameters: AddSectionLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * addSectionLocalMarkerById
     */
    addSectionLocalMarkerById(requestParameters: AddSectionLocalMarkerByIdRequest): Promise<ModelApiResponse>;

    /**
     * Create Section
     * @summary Create Section
     * @param {SectionInput} [sectionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    createSectionRaw(requestParameters: CreateSectionRequest): Promise<runtime.ApiResponse<SectionData>>;

    /**
     * Create Section
     * Create Section
     */
    createSection(requestParameters: CreateSectionRequest): Promise<SectionData>;

    /**
     * Delete Section
     * @summary Delete Section
     * @param {number} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    deleteSectionByIdRaw(requestParameters: DeleteSectionByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete Section
     * Delete Section
     */
    deleteSectionById(requestParameters: DeleteSectionByIdRequest): Promise<ModelApiResponse>;

    /**
     * Get Section
     * @summary Get Section
     * @param {number} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    getSectionByIdRaw(requestParameters: GetSectionByIdRequest): Promise<runtime.ApiResponse<SectionData>>;

    /**
     * Get Section
     * Get Section
     */
    getSectionById(requestParameters: GetSectionByIdRequest): Promise<SectionData>;

    /**
     * Your GET endpoint
     * @summary Your GET endpoint
     * @param {number} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    getSectionMembersByIdRaw(requestParameters: GetSectionMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>>;

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    getSectionMembersById(requestParameters: GetSectionMembersByIdRequest): Promise<Array<MemberData>>;

    /**
     * Get Sections
     * @summary Get Sections
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    getSectionsRaw(requestParameters: GetSectionsRequest): Promise<runtime.ApiResponse<Array<SectionData>>>;

    /**
     * Get Sections
     * Get Sections
     */
    getSections(requestParameters: GetSectionsRequest): Promise<Array<SectionData>>;

    /**
     * removeSectionLocalMarkerById
     * @param {number} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    removeSectionLocalMarkerByIdRaw(requestParameters: RemoveSectionLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * removeSectionLocalMarkerById
     */
    removeSectionLocalMarkerById(requestParameters: RemoveSectionLocalMarkerByIdRequest): Promise<ModelApiResponse>;

    /**
     * Update Section
     * @summary Update Section
     * @param {number} sectionId 
     * @param {SectionInput} [sectionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiInterface
     */
    updateSectionByIdRaw(requestParameters: UpdateSectionByIdRequest): Promise<runtime.ApiResponse<SectionData>>;

    /**
     * Update Section
     * Update Section
     */
    updateSectionById(requestParameters: UpdateSectionByIdRequest): Promise<SectionData>;

}

/**
 * no description
 */
export class SectionsApi extends runtime.BaseAPI implements SectionsApiInterface {

    /**
     * addSectionLocalMarkerById
     */
    async addSectionLocalMarkerByIdRaw(requestParameters: AddSectionLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling addSectionLocalMarkerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}/local`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * addSectionLocalMarkerById
     */
    async addSectionLocalMarkerById(requestParameters: AddSectionLocalMarkerByIdRequest): Promise<ModelApiResponse> {
        const response = await this.addSectionLocalMarkerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Section
     * Create Section
     */
    async createSectionRaw(requestParameters: CreateSectionRequest): Promise<runtime.ApiResponse<SectionData>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionInputToJSON(requestParameters.sectionInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionDataFromJSON(jsonValue));
    }

    /**
     * Create Section
     * Create Section
     */
    async createSection(requestParameters: CreateSectionRequest): Promise<SectionData> {
        const response = await this.createSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete Section
     * Delete Section
     */
    async deleteSectionByIdRaw(requestParameters: DeleteSectionByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling deleteSectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete Section
     * Delete Section
     */
    async deleteSectionById(requestParameters: DeleteSectionByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteSectionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Section
     * Get Section
     */
    async getSectionByIdRaw(requestParameters: GetSectionByIdRequest): Promise<runtime.ApiResponse<SectionData>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling getSectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionDataFromJSON(jsonValue));
    }

    /**
     * Get Section
     * Get Section
     */
    async getSectionById(requestParameters: GetSectionByIdRequest): Promise<SectionData> {
        const response = await this.getSectionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSectionMembersByIdRaw(requestParameters: GetSectionMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling getSectionMembersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}/members`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberDataFromJSON));
    }

    /**
     * Your GET endpoint
     * Your GET endpoint
     */
    async getSectionMembersById(requestParameters: GetSectionMembersByIdRequest): Promise<Array<MemberData>> {
        const response = await this.getSectionMembersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Sections
     * Get Sections
     */
    async getSectionsRaw(requestParameters: GetSectionsRequest): Promise<runtime.ApiResponse<Array<SectionData>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SectionDataFromJSON));
    }

    /**
     * Get Sections
     * Get Sections
     */
    async getSections(requestParameters: GetSectionsRequest): Promise<Array<SectionData>> {
        const response = await this.getSectionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeSectionLocalMarkerById
     */
    async removeSectionLocalMarkerByIdRaw(requestParameters: RemoveSectionLocalMarkerByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling removeSectionLocalMarkerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}/local`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * removeSectionLocalMarkerById
     */
    async removeSectionLocalMarkerById(requestParameters: RemoveSectionLocalMarkerByIdRequest): Promise<ModelApiResponse> {
        const response = await this.removeSectionLocalMarkerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update Section
     * Update Section
     */
    async updateSectionByIdRaw(requestParameters: UpdateSectionByIdRequest): Promise<runtime.ApiResponse<SectionData>> {
        if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
            throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling updateSectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        const response = await this.request({
            path: `/sections/{sectionId}`.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters.sectionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SectionInputToJSON(requestParameters.sectionInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionDataFromJSON(jsonValue));
    }

    /**
     * Update Section
     * Update Section
     */
    async updateSectionById(requestParameters: UpdateSectionByIdRequest): Promise<SectionData> {
        const response = await this.updateSectionByIdRaw(requestParameters);
        return await response.value();
    }

}
