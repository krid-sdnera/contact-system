/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Contacts,
    ContactsFromJSON,
    ContactsToJSON,
    ListRules,
    ListRulesFromJSON,
    ListRulesToJSON,
    MemberInput,
    MemberInputFromJSON,
    MemberInputToJSON,
    MemberResponse,
    MemberResponseFromJSON,
    MemberResponseToJSON,
    MemberRoleInput,
    MemberRoleInputFromJSON,
    MemberRoleInputToJSON,
    MemberRoleResponse,
    MemberRoleResponseFromJSON,
    MemberRoleResponseToJSON,
    MemberRoles,
    MemberRolesFromJSON,
    MemberRolesToJSON,
    Members,
    MembersFromJSON,
    MembersToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface AddMemberRoleByIdRequest {
    memberId: number;
    roleId: number;
    memberRoleInput?: MemberRoleInput;
}

export interface CreateMemberRequest {
    memberInput: MemberInput;
}

export interface DeleteMemberByIdRequest {
    memberId: number;
}

export interface GetListRulesByMemberIdRequest {
    memberId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetMemberByIdRequest {
    memberId: number;
}

export interface GetMemberContactsByIdRequest {
    memberId: number;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetMemberRolesByIdRequest {
    memberId: number;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetMembersRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface MergeMemberRequest {
    memberId: number;
    mergeMemberId: number;
}

export interface PatchMemberByIdRequest {
    memberId: number;
    memberInput?: MemberInput;
}

export interface RemoveMemberRoleByIdRequest {
    memberId: number;
    roleId: number;
}

export interface UpdateMemberByIdRequest {
    memberId: number;
    memberInput?: MemberInput;
}

/**
 * MembersApi - interface
 * 
 * @export
 * @interface MembersApiInterface
 */
export interface MembersApiInterface {
    /**
     * Add Member Role
     * @summary Add Member Role
     * @param {number} memberId 
     * @param {number} roleId 
     * @param {MemberRoleInput} [memberRoleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    addMemberRoleByIdRaw(requestParameters: AddMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberRoleResponse>>;

    /**
     * Add Member Role
     * Add Member Role
     */
    addMemberRoleById(requestParameters: AddMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<MemberRoleResponse>;

    /**
     * Create a member
     * @summary Create a member
     * @param {MemberInput} memberInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    createMemberRaw(requestParameters: CreateMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>>;

    /**
     * Create a member
     * Create a member
     */
    createMember(requestParameters: CreateMemberRequest, initOverrides?: RequestInit): Promise<MemberResponse>;

    /**
     * Delete a member
     * @summary Delete member
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    deleteMemberByIdRaw(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete a member
     * Delete member
     */
    deleteMemberById(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse>;

    /**
     * Get List Rules by Member ID
     * @summary Get List Rules by Member ID
     * @param {number} memberId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getListRulesByMemberIdRaw(requestParameters: GetListRulesByMemberIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListRules>>;

    /**
     * Get List Rules by Member ID
     * Get List Rules by Member ID
     */
    getListRulesByMemberId(requestParameters: GetListRulesByMemberIdRequest, initOverrides?: RequestInit): Promise<ListRules>;

    /**
     * Get details for a member
     * @summary Get Member
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getMemberByIdRaw(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>>;

    /**
     * Get details for a member
     * Get Member
     */
    getMemberById(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse>;

    /**
     * List contacts for this member
     * @summary List member\'s contacts
     * @param {number} memberId 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getMemberContactsByIdRaw(requestParameters: GetMemberContactsByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contacts>>;

    /**
     * List contacts for this member
     * List member\'s contacts
     */
    getMemberContactsById(requestParameters: GetMemberContactsByIdRequest, initOverrides?: RequestInit): Promise<Contacts>;

    /**
     * List roles for this member
     * @summary List member\'s roles
     * @param {number} memberId 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getMemberRolesByIdRaw(requestParameters: GetMemberRolesByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberRoles>>;

    /**
     * List roles for this member
     * List member\'s roles
     */
    getMemberRolesById(requestParameters: GetMemberRolesByIdRequest, initOverrides?: RequestInit): Promise<MemberRoles>;

    /**
     * List all members
     * @summary List all members
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getMembersRaw(requestParameters: GetMembersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Members>>;

    /**
     * List all members
     * List all members
     */
    getMembers(requestParameters: GetMembersRequest, initOverrides?: RequestInit): Promise<Members>;

    /**
     * Merge member
     * @summary Merge member
     * @param {number} memberId 
     * @param {number} mergeMemberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    mergeMemberRaw(requestParameters: MergeMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Merge member
     * Merge member
     */
    mergeMember(requestParameters: MergeMemberRequest, initOverrides?: RequestInit): Promise<ModelApiResponse>;

    /**
     * Partially update member
     * @summary Partial Update Member
     * @param {number} memberId 
     * @param {MemberInput} [memberInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    patchMemberByIdRaw(requestParameters: PatchMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>>;

    /**
     * Partially update member
     * Partial Update Member
     */
    patchMemberById(requestParameters: PatchMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse>;

    /**
     * Remove Member Role
     * @summary Remove Member Role
     * @param {number} memberId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    removeMemberRoleByIdRaw(requestParameters: RemoveMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Remove Member Role
     * Remove Member Role
     */
    removeMemberRoleById(requestParameters: RemoveMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse>;

    /**
     * Update member
     * @summary Update Member
     * @param {number} memberId 
     * @param {MemberInput} [memberInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    updateMemberByIdRaw(requestParameters: UpdateMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>>;

    /**
     * Update member
     * Update Member
     */
    updateMemberById(requestParameters: UpdateMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse>;

}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI implements MembersApiInterface {

    /**
     * Add Member Role
     * Add Member Role
     */
    async addMemberRoleByIdRaw(requestParameters: AddMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberRoleResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling addMemberRoleById.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addMemberRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/roles/{roleId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MemberRoleInputToJSON(requestParameters.memberRoleInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberRoleResponseFromJSON(jsonValue));
    }

    /**
     * Add Member Role
     * Add Member Role
     */
    async addMemberRoleById(requestParameters: AddMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<MemberRoleResponse> {
        const response = await this.addMemberRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a member
     * Create a member
     */
    async createMemberRaw(requestParameters: CreateMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberInput === null || requestParameters.memberInput === undefined) {
            throw new runtime.RequiredError('memberInput','Required parameter requestParameters.memberInput was null or undefined when calling createMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberInputToJSON(requestParameters.memberInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Create a member
     * Create a member
     */
    async createMember(requestParameters: CreateMemberRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.createMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a member
     * Delete member
     */
    async deleteMemberByIdRaw(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling deleteMemberById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete a member
     * Delete member
     */
    async deleteMemberById(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.deleteMemberByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get List Rules by Member ID
     * Get List Rules by Member ID
     */
    async getListRulesByMemberIdRaw(requestParameters: GetListRulesByMemberIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListRules>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getListRulesByMemberId.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/list-rules`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRulesFromJSON(jsonValue));
    }

    /**
     * Get List Rules by Member ID
     * Get List Rules by Member ID
     */
    async getListRulesByMemberId(requestParameters: GetListRulesByMemberIdRequest, initOverrides?: RequestInit): Promise<ListRules> {
        const response = await this.getListRulesByMemberIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details for a member
     * Get Member
     */
    async getMemberByIdRaw(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getMemberById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Get details for a member
     * Get Member
     */
    async getMemberById(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.getMemberByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List contacts for this member
     * List member\'s contacts
     */
    async getMemberContactsByIdRaw(requestParameters: GetMemberContactsByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contacts>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getMemberContactsById.');
        }

        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/contacts`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsFromJSON(jsonValue));
    }

    /**
     * List contacts for this member
     * List member\'s contacts
     */
    async getMemberContactsById(requestParameters: GetMemberContactsByIdRequest, initOverrides?: RequestInit): Promise<Contacts> {
        const response = await this.getMemberContactsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List roles for this member
     * List member\'s roles
     */
    async getMemberRolesByIdRaw(requestParameters: GetMemberRolesByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberRoles>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getMemberRolesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/roles`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberRolesFromJSON(jsonValue));
    }

    /**
     * List roles for this member
     * List member\'s roles
     */
    async getMemberRolesById(requestParameters: GetMemberRolesByIdRequest, initOverrides?: RequestInit): Promise<MemberRoles> {
        const response = await this.getMemberRolesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all members
     * List all members
     */
    async getMembersRaw(requestParameters: GetMembersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Members>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersFromJSON(jsonValue));
    }

    /**
     * List all members
     * List all members
     */
    async getMembers(requestParameters: GetMembersRequest, initOverrides?: RequestInit): Promise<Members> {
        const response = await this.getMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Merge member
     * Merge member
     */
    async mergeMemberRaw(requestParameters: MergeMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling mergeMember.');
        }

        if (requestParameters.mergeMemberId === null || requestParameters.mergeMemberId === undefined) {
            throw new runtime.RequiredError('mergeMemberId','Required parameter requestParameters.mergeMemberId was null or undefined when calling mergeMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/merge_into/{mergeMemberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"mergeMemberId"}}`, encodeURIComponent(String(requestParameters.mergeMemberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Merge member
     * Merge member
     */
    async mergeMember(requestParameters: MergeMemberRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.mergeMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update member
     * Partial Update Member
     */
    async patchMemberByIdRaw(requestParameters: PatchMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling patchMemberById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MemberInputToJSON(requestParameters.memberInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Partially update member
     * Partial Update Member
     */
    async patchMemberById(requestParameters: PatchMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.patchMemberByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Member Role
     * Remove Member Role
     */
    async removeMemberRoleByIdRaw(requestParameters: RemoveMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling removeMemberRoleById.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeMemberRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}/roles/{roleId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Remove Member Role
     * Remove Member Role
     */
    async removeMemberRoleById(requestParameters: RemoveMemberRoleByIdRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.removeMemberRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update member
     * Update Member
     */
    async updateMemberByIdRaw(requestParameters: UpdateMemberByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling updateMemberById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MemberInputToJSON(requestParameters.memberInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Update member
     * Update Member
     */
    async updateMemberById(requestParameters: UpdateMemberByIdRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.updateMemberByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
