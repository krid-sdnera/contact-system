/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListData,
    ListDataFromJSON,
    ListDataToJSON,
    ListInput,
    ListInputFromJSON,
    ListInputToJSON,
    ListRuleData,
    ListRuleDataFromJSON,
    ListRuleDataToJSON,
    ListRuleInput,
    ListRuleInputFromJSON,
    ListRuleInputToJSON,
    ListRules,
    ListRulesFromJSON,
    ListRulesToJSON,
    Lists,
    ListsFromJSON,
    ListsToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    Recipients,
    RecipientsFromJSON,
    RecipientsToJSON,
} from '../models';

export interface CreateListRequest {
    listInput?: ListInput;
}

export interface CreateListRuleByListIdRequest {
    listId: number;
    listRuleInput?: ListRuleInput;
}

export interface DeleteListByIdRequest {
    listId: number;
}

export interface DeleteListRuleByListIdRequest {
    listId: number;
    ruleId: number;
}

export interface GetListByAddressRequest {
    listAddress: string;
}

export interface GetListByIdRequest {
    listId: number;
}

export interface GetListRecipientsByListIdRequest {
    listId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetListRuleByListIdRequest {
    listId: number;
    ruleId: number;
}

export interface GetListRulesByListIdRequest {
    listId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetListsRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface UpdateListByIdRequest {
    listId: number;
    listInput?: ListInput;
}

export interface UpdateListRuleByListIdRequest {
    listId: number;
    ruleId: number;
    listRuleInput?: ListRuleInput;
}

/**
 * ListsApi - interface
 * @export
 * @interface ListsApiInterface
 */
export interface ListsApiInterface {
    /**
     * Create List
     * @summary Create List
     * @param {ListInput} [listInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    createListRaw(requestParameters: CreateListRequest): Promise<runtime.ApiResponse<ListData>>;

    /**
     * Create List
     * Create List
     */
    createList(requestParameters: CreateListRequest): Promise<ListData>;

    /**
     * Create List Rule By List ID
     * @summary Create List Rule By List ID
     * @param {number} listId 
     * @param {ListRuleInput} [listRuleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    createListRuleByListIdRaw(requestParameters: CreateListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>>;

    /**
     * Create List Rule By List ID
     * Create List Rule By List ID
     */
    createListRuleByListId(requestParameters: CreateListRuleByListIdRequest): Promise<ListRuleData>;

    /**
     * Delete List By ID
     * @summary Delete List By ID
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    deleteListByIdRaw(requestParameters: DeleteListByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete List By ID
     * Delete List By ID
     */
    deleteListById(requestParameters: DeleteListByIdRequest): Promise<ModelApiResponse>;

    /**
     * Delete List Rule By List ID
     * @summary Delete List Rule By List ID
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    deleteListRuleByListIdRaw(requestParameters: DeleteListRuleByListIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete List Rule By List ID
     * Delete List Rule By List ID
     */
    deleteListRuleByListId(requestParameters: DeleteListRuleByListIdRequest): Promise<ModelApiResponse>;

    /**
     * Get List By Address
     * @summary Get List By Address
     * @param {string} listAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListByAddressRaw(requestParameters: GetListByAddressRequest): Promise<runtime.ApiResponse<ListData>>;

    /**
     * Get List By Address
     * Get List By Address
     */
    getListByAddress(requestParameters: GetListByAddressRequest): Promise<ListData>;

    /**
     * Get List By ID
     * @summary Get List By ID
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListByIdRaw(requestParameters: GetListByIdRequest): Promise<runtime.ApiResponse<ListData>>;

    /**
     * Get List By ID
     * Get List By ID
     */
    getListById(requestParameters: GetListByIdRequest): Promise<ListData>;

    /**
     * Get List Recipients By List ID
     * @summary Get List Recipients By List ID
     * @param {number} listId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListRecipientsByListIdRaw(requestParameters: GetListRecipientsByListIdRequest): Promise<runtime.ApiResponse<Recipients>>;

    /**
     * Get List Recipients By List ID
     * Get List Recipients By List ID
     */
    getListRecipientsByListId(requestParameters: GetListRecipientsByListIdRequest): Promise<Recipients>;

    /**
     * Get List Rule By List ID
     * @summary Get List Rule By List ID
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListRuleByListIdRaw(requestParameters: GetListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>>;

    /**
     * Get List Rule By List ID
     * Get List Rule By List ID
     */
    getListRuleByListId(requestParameters: GetListRuleByListIdRequest): Promise<ListRuleData>;

    /**
     * Get List Rule By List ID
     * @summary Get List Rules By List ID
     * @param {number} listId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListRulesByListIdRaw(requestParameters: GetListRulesByListIdRequest): Promise<runtime.ApiResponse<ListRules>>;

    /**
     * Get List Rule By List ID
     * Get List Rules By List ID
     */
    getListRulesByListId(requestParameters: GetListRulesByListIdRequest): Promise<ListRules>;

    /**
     * Get Lists
     * @summary Get Lists
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListsRaw(requestParameters: GetListsRequest): Promise<runtime.ApiResponse<Lists>>;

    /**
     * Get Lists
     * Get Lists
     */
    getLists(requestParameters: GetListsRequest): Promise<Lists>;

    /**
     * Update List By ID
     * @summary Update List By ID
     * @param {number} listId 
     * @param {ListInput} [listInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    updateListByIdRaw(requestParameters: UpdateListByIdRequest): Promise<runtime.ApiResponse<ListData>>;

    /**
     * Update List By ID
     * Update List By ID
     */
    updateListById(requestParameters: UpdateListByIdRequest): Promise<ListData>;

    /**
     * Update List Rule By List ID
     * @summary Update List Rule By List ID
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {ListRuleInput} [listRuleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    updateListRuleByListIdRaw(requestParameters: UpdateListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>>;

    /**
     * Update List Rule By List ID
     * Update List Rule By List ID
     */
    updateListRuleByListId(requestParameters: UpdateListRuleByListIdRequest): Promise<ListRuleData>;

}

/**
 * no description
 */
export class ListsApi extends runtime.BaseAPI implements ListsApiInterface {

    /**
     * Create List
     * Create List
     */
    async createListRaw(requestParameters: CreateListRequest): Promise<runtime.ApiResponse<ListData>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListInputToJSON(requestParameters.listInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDataFromJSON(jsonValue));
    }

    /**
     * Create List
     * Create List
     */
    async createList(requestParameters: CreateListRequest): Promise<ListData> {
        const response = await this.createListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create List Rule By List ID
     * Create List Rule By List ID
     */
    async createListRuleByListIdRaw(requestParameters: CreateListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling createListRuleByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/list-rules`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListRuleInputToJSON(requestParameters.listRuleInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleDataFromJSON(jsonValue));
    }

    /**
     * Create List Rule By List ID
     * Create List Rule By List ID
     */
    async createListRuleByListId(requestParameters: CreateListRuleByListIdRequest): Promise<ListRuleData> {
        const response = await this.createListRuleByListIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete List By ID
     * Delete List By ID
     */
    async deleteListByIdRaw(requestParameters: DeleteListByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling deleteListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete List By ID
     * Delete List By ID
     */
    async deleteListById(requestParameters: DeleteListByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete List Rule By List ID
     * Delete List Rule By List ID
     */
    async deleteListRuleByListIdRaw(requestParameters: DeleteListRuleByListIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling deleteListRuleByListId.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteListRuleByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete List Rule By List ID
     * Delete List Rule By List ID
     */
    async deleteListRuleByListId(requestParameters: DeleteListRuleByListIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteListRuleByListIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List By Address
     * Get List By Address
     */
    async getListByAddressRaw(requestParameters: GetListByAddressRequest): Promise<runtime.ApiResponse<ListData>> {
        if (requestParameters.listAddress === null || requestParameters.listAddress === undefined) {
            throw new runtime.RequiredError('listAddress','Required parameter requestParameters.listAddress was null or undefined when calling getListByAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/address/{listAddress}`.replace(`{${"listAddress"}}`, encodeURIComponent(String(requestParameters.listAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDataFromJSON(jsonValue));
    }

    /**
     * Get List By Address
     * Get List By Address
     */
    async getListByAddress(requestParameters: GetListByAddressRequest): Promise<ListData> {
        const response = await this.getListByAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List By ID
     * Get List By ID
     */
    async getListByIdRaw(requestParameters: GetListByIdRequest): Promise<runtime.ApiResponse<ListData>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDataFromJSON(jsonValue));
    }

    /**
     * Get List By ID
     * Get List By ID
     */
    async getListById(requestParameters: GetListByIdRequest): Promise<ListData> {
        const response = await this.getListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List Recipients By List ID
     * Get List Recipients By List ID
     */
    async getListRecipientsByListIdRaw(requestParameters: GetListRecipientsByListIdRequest): Promise<runtime.ApiResponse<Recipients>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListRecipientsByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/recipients`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipientsFromJSON(jsonValue));
    }

    /**
     * Get List Recipients By List ID
     * Get List Recipients By List ID
     */
    async getListRecipientsByListId(requestParameters: GetListRecipientsByListIdRequest): Promise<Recipients> {
        const response = await this.getListRecipientsByListIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List Rule By List ID
     * Get List Rule By List ID
     */
    async getListRuleByListIdRaw(requestParameters: GetListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListRuleByListId.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getListRuleByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleDataFromJSON(jsonValue));
    }

    /**
     * Get List Rule By List ID
     * Get List Rule By List ID
     */
    async getListRuleByListId(requestParameters: GetListRuleByListIdRequest): Promise<ListRuleData> {
        const response = await this.getListRuleByListIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List Rule By List ID
     * Get List Rules By List ID
     */
    async getListRulesByListIdRaw(requestParameters: GetListRulesByListIdRequest): Promise<runtime.ApiResponse<ListRules>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListRulesByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/list-rules`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRulesFromJSON(jsonValue));
    }

    /**
     * Get List Rule By List ID
     * Get List Rules By List ID
     */
    async getListRulesByListId(requestParameters: GetListRulesByListIdRequest): Promise<ListRules> {
        const response = await this.getListRulesByListIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Lists
     * Get Lists
     */
    async getListsRaw(requestParameters: GetListsRequest): Promise<runtime.ApiResponse<Lists>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListsFromJSON(jsonValue));
    }

    /**
     * Get Lists
     * Get Lists
     */
    async getLists(requestParameters: GetListsRequest): Promise<Lists> {
        const response = await this.getListsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update List By ID
     * Update List By ID
     */
    async updateListByIdRaw(requestParameters: UpdateListByIdRequest): Promise<runtime.ApiResponse<ListData>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling updateListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListInputToJSON(requestParameters.listInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDataFromJSON(jsonValue));
    }

    /**
     * Update List By ID
     * Update List By ID
     */
    async updateListById(requestParameters: UpdateListByIdRequest): Promise<ListData> {
        const response = await this.updateListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update List Rule By List ID
     * Update List Rule By List ID
     */
    async updateListRuleByListIdRaw(requestParameters: UpdateListRuleByListIdRequest): Promise<runtime.ApiResponse<ListRuleData>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling updateListRuleByListId.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateListRuleByListId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListRuleInputToJSON(requestParameters.listRuleInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleDataFromJSON(jsonValue));
    }

    /**
     * Update List Rule By List ID
     * Update List Rule By List ID
     */
    async updateListRuleByListId(requestParameters: UpdateListRuleByListIdRequest): Promise<ListRuleData> {
        const response = await this.updateListRuleByListIdRaw(requestParameters);
        return await response.value();
    }

}
