/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    List,
    ListFromJSON,
    ListToJSON,
    ListRule,
    ListRuleFromJSON,
    ListRuleToJSON,
    ListType,
    ListTypeFromJSON,
    ListTypeToJSON,
    MemberData,
    MemberDataFromJSON,
    MemberDataToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface CreateListRequest {
    list?: List;
}

export interface CreateListRuleByIdRequest {
    listId: number;
    listRule?: ListRule;
}

export interface CreateListTypesRequest {
    listType?: ListType;
}

export interface DeleteListByIdRequest {
    listId: number;
}

export interface DeleteListRuleByIdRequest {
    listId: number;
    ruleId: number;
}

export interface DeleteListTypeByIdRequest {
    listTypeId: number;
}

export interface GetListByIdRequest {
    listId: number;
}

export interface GetListMembersByIdRequest {
    listId: number;
}

export interface GetListRuleByIdRequest {
    listId: number;
    ruleId: number;
}

export interface GetListRulesByIdRequest {
    listId: number;
}

export interface GetListTypeByIdRequest {
    listTypeId: number;
}

export interface GetListTypesRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetListsRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface UpdateListByIdRequest {
    listId: number;
    list?: List;
}

export interface UpdateListRuleByIdRequest {
    listId: number;
    ruleId: number;
    listRule?: ListRule;
}

export interface UpdateListTypeByIdRequest {
    listTypeId: number;
    listType?: ListType;
}

/**
 * ListsApi - interface
 * @export
 * @interface ListsApiInterface
 */
export interface ListsApiInterface {
    /**
     * createList
     * @param {List} [list] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    createListRaw(requestParameters: CreateListRequest): Promise<runtime.ApiResponse<List>>;

    /**
     * createList
     */
    createList(requestParameters: CreateListRequest): Promise<List>;

    /**
     * createListRuleById
     * @param {number} listId 
     * @param {ListRule} [listRule] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    createListRuleByIdRaw(requestParameters: CreateListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>>;

    /**
     * createListRuleById
     */
    createListRuleById(requestParameters: CreateListRuleByIdRequest): Promise<ListRule>;

    /**
     * createListTypes
     * @param {ListType} [listType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    createListTypesRaw(requestParameters: CreateListTypesRequest): Promise<runtime.ApiResponse<ListType>>;

    /**
     * createListTypes
     */
    createListTypes(requestParameters: CreateListTypesRequest): Promise<ListType>;

    /**
     * deleteListById
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    deleteListByIdRaw(requestParameters: DeleteListByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * deleteListById
     */
    deleteListById(requestParameters: DeleteListByIdRequest): Promise<ModelApiResponse>;

    /**
     * deleteListRuleById
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    deleteListRuleByIdRaw(requestParameters: DeleteListRuleByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * deleteListRuleById
     */
    deleteListRuleById(requestParameters: DeleteListRuleByIdRequest): Promise<ModelApiResponse>;

    /**
     * deleteListTypeById
     * @param {number} listTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    deleteListTypeByIdRaw(requestParameters: DeleteListTypeByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * deleteListTypeById
     */
    deleteListTypeById(requestParameters: DeleteListTypeByIdRequest): Promise<ModelApiResponse>;

    /**
     * getListById
     * @summary Your GET endpoint
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListByIdRaw(requestParameters: GetListByIdRequest): Promise<runtime.ApiResponse<List>>;

    /**
     * getListById
     * Your GET endpoint
     */
    getListById(requestParameters: GetListByIdRequest): Promise<List>;

    /**
     * getListMembersById
     * @summary Your GET endpoint
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListMembersByIdRaw(requestParameters: GetListMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>>;

    /**
     * getListMembersById
     * Your GET endpoint
     */
    getListMembersById(requestParameters: GetListMembersByIdRequest): Promise<Array<MemberData>>;

    /**
     * getListRuleById
     * @summary Your GET endpoint
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListRuleByIdRaw(requestParameters: GetListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>>;

    /**
     * getListRuleById
     * Your GET endpoint
     */
    getListRuleById(requestParameters: GetListRuleByIdRequest): Promise<ListRule>;

    /**
     * getListRulesById
     * @summary Your GET endpoint
     * @param {number} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListRulesByIdRaw(requestParameters: GetListRulesByIdRequest): Promise<runtime.ApiResponse<Array<ListRule>>>;

    /**
     * getListRulesById
     * Your GET endpoint
     */
    getListRulesById(requestParameters: GetListRulesByIdRequest): Promise<Array<ListRule>>;

    /**
     * getListTypeById
     * @summary Your GET endpoint
     * @param {number} listTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListTypeByIdRaw(requestParameters: GetListTypeByIdRequest): Promise<runtime.ApiResponse<ListType>>;

    /**
     * getListTypeById
     * Your GET endpoint
     */
    getListTypeById(requestParameters: GetListTypeByIdRequest): Promise<ListType>;

    /**
     * getListTypes
     * @summary Your GET endpoint
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListTypesRaw(requestParameters: GetListTypesRequest): Promise<runtime.ApiResponse<Array<ListType>>>;

    /**
     * getListTypes
     * Your GET endpoint
     */
    getListTypes(requestParameters: GetListTypesRequest): Promise<Array<ListType>>;

    /**
     * getLists
     * @summary Your GET endpoint
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    getListsRaw(requestParameters: GetListsRequest): Promise<runtime.ApiResponse<Array<List>>>;

    /**
     * getLists
     * Your GET endpoint
     */
    getLists(requestParameters: GetListsRequest): Promise<Array<List>>;

    /**
     * updateListById
     * @param {number} listId 
     * @param {List} [list] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    updateListByIdRaw(requestParameters: UpdateListByIdRequest): Promise<runtime.ApiResponse<List>>;

    /**
     * updateListById
     */
    updateListById(requestParameters: UpdateListByIdRequest): Promise<List>;

    /**
     * updateListRuleById
     * @param {number} listId 
     * @param {number} ruleId 
     * @param {ListRule} [listRule] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    updateListRuleByIdRaw(requestParameters: UpdateListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>>;

    /**
     * updateListRuleById
     */
    updateListRuleById(requestParameters: UpdateListRuleByIdRequest): Promise<ListRule>;

    /**
     * updateListTypeById
     * @param {number} listTypeId 
     * @param {ListType} [listType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiInterface
     */
    updateListTypeByIdRaw(requestParameters: UpdateListTypeByIdRequest): Promise<runtime.ApiResponse<ListType>>;

    /**
     * updateListTypeById
     */
    updateListTypeById(requestParameters: UpdateListTypeByIdRequest): Promise<ListType>;

}

/**
 * no description
 */
export class ListsApi extends runtime.BaseAPI implements ListsApiInterface {

    /**
     * createList
     */
    async createListRaw(requestParameters: CreateListRequest): Promise<runtime.ApiResponse<List>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListToJSON(requestParameters.list),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     * createList
     */
    async createList(requestParameters: CreateListRequest): Promise<List> {
        const response = await this.createListRaw(requestParameters);
        return await response.value();
    }

    /**
     * createListRuleById
     */
    async createListRuleByIdRaw(requestParameters: CreateListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling createListRuleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListRuleToJSON(requestParameters.listRule),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleFromJSON(jsonValue));
    }

    /**
     * createListRuleById
     */
    async createListRuleById(requestParameters: CreateListRuleByIdRequest): Promise<ListRule> {
        const response = await this.createListRuleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * createListTypes
     */
    async createListTypesRaw(requestParameters: CreateListTypesRequest): Promise<runtime.ApiResponse<ListType>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListTypeToJSON(requestParameters.listType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTypeFromJSON(jsonValue));
    }

    /**
     * createListTypes
     */
    async createListTypes(requestParameters: CreateListTypesRequest): Promise<ListType> {
        const response = await this.createListTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteListById
     */
    async deleteListByIdRaw(requestParameters: DeleteListByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling deleteListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * deleteListById
     */
    async deleteListById(requestParameters: DeleteListByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteListRuleById
     */
    async deleteListRuleByIdRaw(requestParameters: DeleteListRuleByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling deleteListRuleById.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteListRuleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * deleteListRuleById
     */
    async deleteListRuleById(requestParameters: DeleteListRuleByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteListRuleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteListTypeById
     */
    async deleteListTypeByIdRaw(requestParameters: DeleteListTypeByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.listTypeId === null || requestParameters.listTypeId === undefined) {
            throw new runtime.RequiredError('listTypeId','Required parameter requestParameters.listTypeId was null or undefined when calling deleteListTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/types/{listTypeId}`.replace(`{${"listTypeId"}}`, encodeURIComponent(String(requestParameters.listTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * deleteListTypeById
     */
    async deleteListTypeById(requestParameters: DeleteListTypeByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteListTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListById
     * Your GET endpoint
     */
    async getListByIdRaw(requestParameters: GetListByIdRequest): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     * getListById
     * Your GET endpoint
     */
    async getListById(requestParameters: GetListByIdRequest): Promise<List> {
        const response = await this.getListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListMembersById
     * Your GET endpoint
     */
    async getListMembersByIdRaw(requestParameters: GetListMembersByIdRequest): Promise<runtime.ApiResponse<Array<MemberData>>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListMembersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/members`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberDataFromJSON));
    }

    /**
     * getListMembersById
     * Your GET endpoint
     */
    async getListMembersById(requestParameters: GetListMembersByIdRequest): Promise<Array<MemberData>> {
        const response = await this.getListMembersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListRuleById
     * Your GET endpoint
     */
    async getListRuleByIdRaw(requestParameters: GetListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListRuleById.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getListRuleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleFromJSON(jsonValue));
    }

    /**
     * getListRuleById
     * Your GET endpoint
     */
    async getListRuleById(requestParameters: GetListRuleByIdRequest): Promise<ListRule> {
        const response = await this.getListRuleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListRulesById
     * Your GET endpoint
     */
    async getListRulesByIdRaw(requestParameters: GetListRulesByIdRequest): Promise<runtime.ApiResponse<Array<ListRule>>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling getListRulesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListRuleFromJSON));
    }

    /**
     * getListRulesById
     * Your GET endpoint
     */
    async getListRulesById(requestParameters: GetListRulesByIdRequest): Promise<Array<ListRule>> {
        const response = await this.getListRulesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListTypeById
     * Your GET endpoint
     */
    async getListTypeByIdRaw(requestParameters: GetListTypeByIdRequest): Promise<runtime.ApiResponse<ListType>> {
        if (requestParameters.listTypeId === null || requestParameters.listTypeId === undefined) {
            throw new runtime.RequiredError('listTypeId','Required parameter requestParameters.listTypeId was null or undefined when calling getListTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/types/{listTypeId}`.replace(`{${"listTypeId"}}`, encodeURIComponent(String(requestParameters.listTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTypeFromJSON(jsonValue));
    }

    /**
     * getListTypeById
     * Your GET endpoint
     */
    async getListTypeById(requestParameters: GetListTypeByIdRequest): Promise<ListType> {
        const response = await this.getListTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListTypes
     * Your GET endpoint
     */
    async getListTypesRaw(requestParameters: GetListTypesRequest): Promise<runtime.ApiResponse<Array<ListType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListTypeFromJSON));
    }

    /**
     * getListTypes
     * Your GET endpoint
     */
    async getListTypes(requestParameters: GetListTypesRequest): Promise<Array<ListType>> {
        const response = await this.getListTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLists
     * Your GET endpoint
     */
    async getListsRaw(requestParameters: GetListsRequest): Promise<runtime.ApiResponse<Array<List>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListFromJSON));
    }

    /**
     * getLists
     * Your GET endpoint
     */
    async getLists(requestParameters: GetListsRequest): Promise<Array<List>> {
        const response = await this.getListsRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateListById
     */
    async updateListByIdRaw(requestParameters: UpdateListByIdRequest): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling updateListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListToJSON(requestParameters.list),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     * updateListById
     */
    async updateListById(requestParameters: UpdateListByIdRequest): Promise<List> {
        const response = await this.updateListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateListRuleById
     */
    async updateListRuleByIdRaw(requestParameters: UpdateListRuleByIdRequest): Promise<runtime.ApiResponse<ListRule>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling updateListRuleById.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateListRuleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{listId}/rules/{ruleId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListRuleToJSON(requestParameters.listRule),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRuleFromJSON(jsonValue));
    }

    /**
     * updateListRuleById
     */
    async updateListRuleById(requestParameters: UpdateListRuleByIdRequest): Promise<ListRule> {
        const response = await this.updateListRuleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateListTypeById
     */
    async updateListTypeByIdRaw(requestParameters: UpdateListTypeByIdRequest): Promise<runtime.ApiResponse<ListType>> {
        if (requestParameters.listTypeId === null || requestParameters.listTypeId === undefined) {
            throw new runtime.RequiredError('listTypeId','Required parameter requestParameters.listTypeId was null or undefined when calling updateListTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/types/{listTypeId}`.replace(`{${"listTypeId"}}`, encodeURIComponent(String(requestParameters.listTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListTypeToJSON(requestParameters.listType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTypeFromJSON(jsonValue));
    }

    /**
     * updateListTypeById
     */
    async updateListTypeById(requestParameters: UpdateListTypeByIdRequest): Promise<ListType> {
        const response = await this.updateListTypeByIdRaw(requestParameters);
        return await response.value();
    }

}
