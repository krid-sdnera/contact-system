/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JwtErrorData,
    JwtErrorDataFromJSON,
    JwtErrorDataToJSON,
    JwtErrorResponse,
    JwtErrorResponseFromJSON,
    JwtErrorResponseToJSON,
    JwtInput,
    JwtInputFromJSON,
    JwtInputToJSON,
} from '../models';

export interface GetJWTRequest {
    jwtInput?: JwtInput;
}

export interface RefreshJWTRequest {
    refreshToken: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Get a JWT
     * @summary Get JWT
     * @param {JwtInput} [jwtInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getJWTRaw(requestParameters: GetJWTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwtErrorResponse>>;

    /**
     * Get a JWT
     * Get JWT
     */
    getJWT(requestParameters: GetJWTRequest, initOverrides?: RequestInit): Promise<JwtErrorResponse>;

    /**
     * Refresh a JWT
     * @summary Refresh JWT
     * @param {string} refreshToken The refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    refreshJWTRaw(requestParameters: RefreshJWTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwtErrorResponse>>;

    /**
     * Refresh a JWT
     * Refresh JWT
     */
    refreshJWT(requestParameters: RefreshJWTRequest, initOverrides?: RequestInit): Promise<JwtErrorResponse>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Get a JWT
     * Get JWT
     */
    async getJWTRaw(requestParameters: GetJWTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwtErrorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtInputToJSON(requestParameters.jwtInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtErrorResponseFromJSON(jsonValue));
    }

    /**
     * Get a JWT
     * Get JWT
     */
    async getJWT(requestParameters: GetJWTRequest, initOverrides?: RequestInit): Promise<JwtErrorResponse> {
        const response = await this.getJWTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh a JWT
     * Refresh JWT
     */
    async refreshJWTRaw(requestParameters: RefreshJWTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwtErrorResponse>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling refreshJWT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.refreshToken !== undefined) {
            formParams.append('refresh_token', requestParameters.refreshToken as any);
        }

        const response = await this.request({
            path: `/auth/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtErrorResponseFromJSON(jsonValue));
    }

    /**
     * Refresh a JWT
     * Refresh JWT
     */
    async refreshJWT(requestParameters: RefreshJWTRequest, initOverrides?: RequestInit): Promise<JwtErrorResponse> {
        const response = await this.refreshJWTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
