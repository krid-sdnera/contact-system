/* tslint:disable */
/* eslint-disable */
/**
 * Contact System API
 * This is the spec for the Constact system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dirk@arends.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContactData,
    ContactDataFromJSON,
    ContactDataToJSON,
    ContactInput,
    ContactInputFromJSON,
    ContactInputToJSON,
    Contacts,
    ContactsFromJSON,
    ContactsToJSON,
    ListRules,
    ListRulesFromJSON,
    ListRulesToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface CreateContactRequest {
    contactInput?: ContactInput;
}

export interface DeleteContactByIdRequest {
    contactId: number;
}

export interface GetContactByIdRequest {
    contactId: number;
}

export interface GetContactsRequest {
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface GetListRulesByContactIdRequest {
    contactId: number;
    query?: string;
    sort?: string;
    pageSize?: number;
    page?: number;
}

export interface PatchContactByIdRequest {
    contactId: number;
    contactInput?: ContactInput;
}

export interface UpdateContactByIdRequest {
    contactId: number;
    contactInput?: ContactInput;
}

/**
 * ContactsApi - interface
 * @export
 * @interface ContactsApiInterface
 */
export interface ContactsApiInterface {
    /**
     * create Contact
     * @summary Create Contact
     * @param {ContactInput} [contactInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    createContactRaw(requestParameters: CreateContactRequest): Promise<runtime.ApiResponse<ContactData>>;

    /**
     * create Contact
     * Create Contact
     */
    createContact(requestParameters: CreateContactRequest): Promise<ContactData>;

    /**
     * Delete Contact By ID
     * @summary Delete Contact By ID
     * @param {number} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    deleteContactByIdRaw(requestParameters: DeleteContactByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Delete Contact By ID
     * Delete Contact By ID
     */
    deleteContactById(requestParameters: DeleteContactByIdRequest): Promise<ModelApiResponse>;

    /**
     * Get Contact By ID
     * @summary Get Contact By ID
     * @param {number} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    getContactByIdRaw(requestParameters: GetContactByIdRequest): Promise<runtime.ApiResponse<ContactData>>;

    /**
     * Get Contact By ID
     * Get Contact By ID
     */
    getContactById(requestParameters: GetContactByIdRequest): Promise<ContactData>;

    /**
     * Returns a list of Contacts
     * @summary List Contacts
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    getContactsRaw(requestParameters: GetContactsRequest): Promise<runtime.ApiResponse<Contacts>>;

    /**
     * Returns a list of Contacts
     * List Contacts
     */
    getContacts(requestParameters: GetContactsRequest): Promise<Contacts>;

    /**
     * Get List Rules By Contact ID
     * @summary Get List Rules By Contact ID
     * @param {number} contactId 
     * @param {string} [query] 
     * @param {string} [sort] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    getListRulesByContactIdRaw(requestParameters: GetListRulesByContactIdRequest): Promise<runtime.ApiResponse<ListRules>>;

    /**
     * Get List Rules By Contact ID
     * Get List Rules By Contact ID
     */
    getListRulesByContactId(requestParameters: GetListRulesByContactIdRequest): Promise<ListRules>;

    /**
     * Patch Contact By ID
     * @summary Patch Contact By ID
     * @param {number} contactId 
     * @param {ContactInput} [contactInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    patchContactByIdRaw(requestParameters: PatchContactByIdRequest): Promise<runtime.ApiResponse<ContactData>>;

    /**
     * Patch Contact By ID
     * Patch Contact By ID
     */
    patchContactById(requestParameters: PatchContactByIdRequest): Promise<ContactData>;

    /**
     * Update Contact By ID
     * @summary Update Contact By ID
     * @param {number} contactId 
     * @param {ContactInput} [contactInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    updateContactByIdRaw(requestParameters: UpdateContactByIdRequest): Promise<runtime.ApiResponse<ContactData>>;

    /**
     * Update Contact By ID
     * Update Contact By ID
     */
    updateContactById(requestParameters: UpdateContactByIdRequest): Promise<ContactData>;

}

/**
 * no description
 */
export class ContactsApi extends runtime.BaseAPI implements ContactsApiInterface {

    /**
     * create Contact
     * Create Contact
     */
    async createContactRaw(requestParameters: CreateContactRequest): Promise<runtime.ApiResponse<ContactData>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInputToJSON(requestParameters.contactInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactDataFromJSON(jsonValue));
    }

    /**
     * create Contact
     * Create Contact
     */
    async createContact(requestParameters: CreateContactRequest): Promise<ContactData> {
        const response = await this.createContactRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete Contact By ID
     * Delete Contact By ID
     */
    async deleteContactByIdRaw(requestParameters: DeleteContactByIdRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling deleteContactById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete Contact By ID
     * Delete Contact By ID
     */
    async deleteContactById(requestParameters: DeleteContactByIdRequest): Promise<ModelApiResponse> {
        const response = await this.deleteContactByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Contact By ID
     * Get Contact By ID
     */
    async getContactByIdRaw(requestParameters: GetContactByIdRequest): Promise<runtime.ApiResponse<ContactData>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling getContactById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactDataFromJSON(jsonValue));
    }

    /**
     * Get Contact By ID
     * Get Contact By ID
     */
    async getContactById(requestParameters: GetContactByIdRequest): Promise<ContactData> {
        const response = await this.getContactByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of Contacts
     * List Contacts
     */
    async getContactsRaw(requestParameters: GetContactsRequest): Promise<runtime.ApiResponse<Contacts>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsFromJSON(jsonValue));
    }

    /**
     * Returns a list of Contacts
     * List Contacts
     */
    async getContacts(requestParameters: GetContactsRequest): Promise<Contacts> {
        const response = await this.getContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get List Rules By Contact ID
     * Get List Rules By Contact ID
     */
    async getListRulesByContactIdRaw(requestParameters: GetListRulesByContactIdRequest): Promise<runtime.ApiResponse<ListRules>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling getListRulesByContactId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{contactId}/list-rules`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRulesFromJSON(jsonValue));
    }

    /**
     * Get List Rules By Contact ID
     * Get List Rules By Contact ID
     */
    async getListRulesByContactId(requestParameters: GetListRulesByContactIdRequest): Promise<ListRules> {
        const response = await this.getListRulesByContactIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Patch Contact By ID
     * Patch Contact By ID
     */
    async patchContactByIdRaw(requestParameters: PatchContactByIdRequest): Promise<runtime.ApiResponse<ContactData>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling patchContactById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInputToJSON(requestParameters.contactInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactDataFromJSON(jsonValue));
    }

    /**
     * Patch Contact By ID
     * Patch Contact By ID
     */
    async patchContactById(requestParameters: PatchContactByIdRequest): Promise<ContactData> {
        const response = await this.patchContactByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update Contact By ID
     * Update Contact By ID
     */
    async updateContactByIdRaw(requestParameters: UpdateContactByIdRequest): Promise<runtime.ApiResponse<ContactData>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling updateContactById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-auth-token"] = this.configuration.apiKey("x-auth-token"); // contact_auth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt_auth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInputToJSON(requestParameters.contactInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactDataFromJSON(jsonValue));
    }

    /**
     * Update Contact By ID
     * Update Contact By ID
     */
    async updateContactById(requestParameters: UpdateContactByIdRequest): Promise<ContactData> {
        const response = await this.updateContactByIdRaw(requestParameters);
        return await response.value();
    }

}
