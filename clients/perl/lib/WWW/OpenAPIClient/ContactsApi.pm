=begin comment

Contact System API

This is the spec for the Constact system API

The version of the OpenAPI document: 1.0.0
Contact: dirk@arends.com.au
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ContactsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_contact
#
# Create Contact
# 
# @param ContactInput $contact_input  (optional)
{
    my $params = {
    'contact_input' => {
        data_type => 'ContactInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact' } = { 
        summary => 'Create Contact',
        params => $params,
        returns => 'ContactResponse',
        };
}
# @return ContactResponse
#
sub create_contact {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'contact_input'}) {
        $_body_data = $args{'contact_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactResponse', $response);
    return $_response_object;
}

#
# delete_contact_by_id
#
# Delete Contact By ID
# 
# @param int $contact_id  (required)
{
    my $params = {
    'contact_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_by_id' } = { 
        summary => 'Delete Contact By ID',
        params => $params,
        returns => 'ApiResponse',
        };
}
# @return ApiResponse
#
sub delete_contact_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling delete_contact_by_id");
    }

    # parse inputs
    my $_resource_path = '/contacts/{contactId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contactId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiResponse', $response);
    return $_response_object;
}

#
# get_contact_by_id
#
# Get Contact By ID
# 
# @param int $contact_id  (required)
{
    my $params = {
    'contact_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_by_id' } = { 
        summary => 'Get Contact By ID',
        params => $params,
        returns => 'ContactResponse',
        };
}
# @return ContactResponse
#
sub get_contact_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling get_contact_by_id");
    }

    # parse inputs
    my $_resource_path = '/contacts/{contactId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contactId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactResponse', $response);
    return $_response_object;
}

#
# get_contacts
#
# List Contacts
# 
# @param string $query  (optional)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts' } = { 
        summary => 'List Contacts',
        params => $params,
        returns => 'Contacts',
        };
}
# @return Contacts
#
sub get_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contacts', $response);
    return $_response_object;
}

#
# get_list_rules_by_contact_id
#
# Get List Rules By Contact ID
# 
# @param int $contact_id  (required)
# @param string $query  (optional)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'contact_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_rules_by_contact_id' } = { 
        summary => 'Get List Rules By Contact ID',
        params => $params,
        returns => 'ListRules',
        };
}
# @return ListRules
#
sub get_list_rules_by_contact_id {
    my ($self, %args) = @_;

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling get_list_rules_by_contact_id");
    }

    # parse inputs
    my $_resource_path = '/contacts/{contactId}/list-rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contactId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListRules', $response);
    return $_response_object;
}

#
# patch_contact_by_id
#
# Patch Contact By ID
# 
# @param int $contact_id  (required)
# @param ContactInput $contact_input  (optional)
{
    my $params = {
    'contact_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'contact_input' => {
        data_type => 'ContactInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_contact_by_id' } = { 
        summary => 'Patch Contact By ID',
        params => $params,
        returns => 'ContactResponse',
        };
}
# @return ContactResponse
#
sub patch_contact_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling patch_contact_by_id");
    }

    # parse inputs
    my $_resource_path = '/contacts/{contactId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contactId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'contact_input'}) {
        $_body_data = $args{'contact_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactResponse', $response);
    return $_response_object;
}

#
# update_contact_by_id
#
# Update Contact By ID
# 
# @param int $contact_id  (required)
# @param ContactInput $contact_input  (optional)
{
    my $params = {
    'contact_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'contact_input' => {
        data_type => 'ContactInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact_by_id' } = { 
        summary => 'Update Contact By ID',
        params => $params,
        returns => 'ContactResponse',
        };
}
# @return ContactResponse
#
sub update_contact_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling update_contact_by_id");
    }

    # parse inputs
    my $_resource_path = '/contacts/{contactId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contactId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'contact_input'}) {
        $_body_data = $args{'contact_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactResponse', $response);
    return $_response_object;
}

1;
