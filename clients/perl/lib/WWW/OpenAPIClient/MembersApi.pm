=begin comment

Contact System API

This is the spec for the Constact system API

The version of the OpenAPI document: 1.0.0
Contact: dirk@arends.com.au
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MembersApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_member_role_by_id
#
# Add Member Role
# 
# @param int $member_id  (required)
# @param int $role_id  (required)
# @param MemberRoleInput $member_role_input  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'role_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'member_role_input' => {
        data_type => 'MemberRoleInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_member_role_by_id' } = { 
        summary => 'Add Member Role',
        params => $params,
        returns => 'MemberRoleData',
        };
}
# @return MemberRoleData
#
sub add_member_role_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling add_member_role_by_id");
    }

    # verify the required parameter 'role_id' is set
    unless (exists $args{'role_id'}) {
      croak("Missing the required parameter 'role_id' when calling add_member_role_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/roles/{roleId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_id'}) {
        my $_base_variable = "{" . "roleId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'member_role_input'}) {
        $_body_data = $args{'member_role_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberRoleData', $response);
    return $_response_object;
}

#
# create_member
#
# Create a member
# 
# @param MemberInput $member_input  (required)
{
    my $params = {
    'member_input' => {
        data_type => 'MemberInput',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_member' } = { 
        summary => 'Create a member',
        params => $params,
        returns => 'MemberData',
        };
}
# @return MemberData
#
sub create_member {
    my ($self, %args) = @_;

    # verify the required parameter 'member_input' is set
    unless (exists $args{'member_input'}) {
      croak("Missing the required parameter 'member_input' when calling create_member");
    }

    # parse inputs
    my $_resource_path = '/members';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'member_input'}) {
        $_body_data = $args{'member_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberData', $response);
    return $_response_object;
}

#
# delete_member_by_id
#
# Delete member
# 
# @param int $member_id  (required)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_member_by_id' } = { 
        summary => 'Delete member',
        params => $params,
        returns => 'ApiResponse',
        };
}
# @return ApiResponse
#
sub delete_member_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling delete_member_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiResponse', $response);
    return $_response_object;
}

#
# get_list_rules_by_member_id
#
# Get List Rules by Member ID
# 
# @param int $member_id  (required)
# @param string $query  (optional)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_rules_by_member_id' } = { 
        summary => 'Get List Rules by Member ID',
        params => $params,
        returns => 'ListRules',
        };
}
# @return ListRules
#
sub get_list_rules_by_member_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling get_list_rules_by_member_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/list-rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListRules', $response);
    return $_response_object;
}

#
# get_member_by_id
#
# Get Member
# 
# @param int $member_id  (required)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_member_by_id' } = { 
        summary => 'Get Member',
        params => $params,
        returns => 'MemberData',
        };
}
# @return MemberData
#
sub get_member_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling get_member_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberData', $response);
    return $_response_object;
}

#
# get_member_contacts_by_id
#
# List member's contacts
# 
# @param int $member_id  (required)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_member_contacts_by_id' } = { 
        summary => 'List member&#39;s contacts',
        params => $params,
        returns => 'Contacts',
        };
}
# @return Contacts
#
sub get_member_contacts_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling get_member_contacts_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contacts', $response);
    return $_response_object;
}

#
# get_member_roles_by_id
#
# List member's roles
# 
# @param int $member_id  (required)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_member_roles_by_id' } = { 
        summary => 'List member&#39;s roles',
        params => $params,
        returns => 'MemberRoles',
        };
}
# @return MemberRoles
#
sub get_member_roles_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling get_member_roles_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberRoles', $response);
    return $_response_object;
}

#
# get_members
#
# List all members
# 
# @param string $query  (optional)
# @param string $sort  (optional)
# @param int $page_size  (optional)
# @param int $page  (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_members' } = { 
        summary => 'List all members',
        params => $params,
        returns => 'Members',
        };
}
# @return Members
#
sub get_members {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/members';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Members', $response);
    return $_response_object;
}

#
# merge_member
#
# Merge member
# 
# @param int $member_id  (required)
# @param int $merge_member_id  (required)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'merge_member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'merge_member' } = { 
        summary => 'Merge member',
        params => $params,
        returns => 'ApiResponse',
        };
}
# @return ApiResponse
#
sub merge_member {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling merge_member");
    }

    # verify the required parameter 'merge_member_id' is set
    unless (exists $args{'merge_member_id'}) {
      croak("Missing the required parameter 'merge_member_id' when calling merge_member");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/merge_into/{mergeMemberId}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'merge_member_id'}) {
        my $_base_variable = "{" . "mergeMemberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'merge_member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiResponse', $response);
    return $_response_object;
}

#
# patch_member_by_id
#
# Partial Update Member
# 
# @param int $member_id  (required)
# @param MemberInput $member_input  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'member_input' => {
        data_type => 'MemberInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_member_by_id' } = { 
        summary => 'Partial Update Member',
        params => $params,
        returns => 'MemberData',
        };
}
# @return MemberData
#
sub patch_member_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling patch_member_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'member_input'}) {
        $_body_data = $args{'member_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberData', $response);
    return $_response_object;
}

#
# remove_member_role_by_id
#
# Remove Member Role
# 
# @param int $member_id  (required)
# @param int $role_id  (required)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'role_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_member_role_by_id' } = { 
        summary => 'Remove Member Role',
        params => $params,
        returns => 'ApiResponse',
        };
}
# @return ApiResponse
#
sub remove_member_role_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling remove_member_role_by_id");
    }

    # verify the required parameter 'role_id' is set
    unless (exists $args{'role_id'}) {
      croak("Missing the required parameter 'role_id' when calling remove_member_role_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}/roles/{roleId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_id'}) {
        my $_base_variable = "{" . "roleId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiResponse', $response);
    return $_response_object;
}

#
# update_member_by_id
#
# Update Member
# 
# @param int $member_id  (required)
# @param MemberInput $member_input  (optional)
{
    my $params = {
    'member_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'member_input' => {
        data_type => 'MemberInput',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_member_by_id' } = { 
        summary => 'Update Member',
        params => $params,
        returns => 'MemberData',
        };
}
# @return MemberData
#
sub update_member_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling update_member_by_id");
    }

    # parse inputs
    my $_resource_path = '/members/{memberId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "memberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'member_input'}) {
        $_body_data = $args{'member_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(contact_auth jwt_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MemberData', $response);
    return $_response_object;
}

1;
